---
# Source: gloo-platform/charts/prometheus/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: gloo-platform
    app.kubernetes.io/version: v2.53.0
    helm.sh/chart: prometheus-25.23.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: prometheus-server
  namespace: cnp-nginx
  annotations:
    {}
---
# Source: gloo-platform/charts/telemetryCollector/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gloo-telemetry-collector
  namespace: cnp-nginx
  labels:
    helm.sh/chart: telemetryCollector-0.93.3
    app.kubernetes.io/name: telemetryCollector
    app.kubernetes.io/instance: gloo-platform
    app.kubernetes.io/version: "0.102.1"
    app.kubernetes.io/managed-by: Helm
    app: gloo-telemetry-collector-agent
---
# Source: gloo-platform/charts/telemetryGateway/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gloo-telemetry-gateway
  namespace: cnp-nginx
  labels:
    helm.sh/chart: telemetryGateway-0.93.3
    app.kubernetes.io/name: telemetryGateway
    app.kubernetes.io/instance: gloo-platform
    app.kubernetes.io/version: "0.102.1"
    app.kubernetes.io/managed-by: Helm
    app: gloo-telemetry-gateway
---
# Source: gloo-platform/templates/deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo-mesh-mgmt-server
  name: gloo-mesh-mgmt-server
  namespace: cnp-nginx
---
# Source: gloo-platform/templates/deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo-mesh-ui
  name: gloo-mesh-ui
  namespace: cnp-nginx
---
# Source: gloo-platform/templates/deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: gloo-mesh-redis
  name: gloo-mesh-redis
  namespace: cnp-nginx
---
# Source: gloo-platform/templates/cert.yaml
# Declare variable to store CA object, whether it's generated anew or built from existing values






# Root CA Cert doesn't exist on cluster, generate a new one
 # TODO don't hard-code common name






# Server cert doesn't exist, generate a new one











apiVersion: v1
kind: Secret
metadata:
  name: relay-root-tls-secret
  namespace: cnp-nginx
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHekNDQWdPZ0F3SUJBZ0lRUUJyVXlReWZ4NDJhUElBVENNN1BtVEFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFERXcxeVpXeGhlUzF5YjI5MExXTmhNQjRYRFRJMU1EWXhNREUyTXprd01sb1hEVEkyTURZeApNREUyTXprd01sb3dHREVXTUJRR0ExVUVBeE1OY21Wc1lYa3RjbTl2ZEMxallUQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMUHVleVU5WmczU0hvVnpTYXB0eWVhSnhodVlBK0VTdWNLdk1TVkwKYXV1M1JzUllmOTNRNi9rc1NEWHdNS1hMQWlMaVRGYUltRGdsWHBvWXFlSWxWeTA1bHlTSXIyalRSeSs1Mm1MTQpqMDQyN0QzcG4yK0tlcC9yRGxZWVpET3JZZVlFTEM3aEV2Z2l6aWdkOFE4SjlQMXFYa20vMDdsMmFQcTBjeDJnClVaRmtkaFVGUE5aTWpHaS9RR0FFSmZTTDNISS9QcCtmTTlFR3gyenNpY05mOGo2WUc0MGdabnF0cVg1VXRaSW4Ka3ZzTFpIcWlqU29lYXlaV2ErOTRJaHllN000UWx1dEFxTFlCZ1R3RXEzZ280SEJTb29wK2ovVUdGbkdVMU1DZQpsVVdvbm9CTjF4SllNRjJrRDlueERRdUd5S0h5SG1CNS9xZ0Njb3FtVFhQY1RWY0NBd0VBQWFOaE1GOHdEZ1lEClZSMFBBUUgvQkFRREFnS2tNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlYKSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCU2ZCWXphSWpkVkRJeEtWOUFQU0dSSEIwVU5aVEFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQUdic3laUHh5SHdFWWdkREZvN0pRVDVVUGRWQkNMbndEdURCS3lFejJERVhoCmpxbVVwRmUwaWhWY2dIdkZjcmEwNjlQSmtpQ1BtWWhFOWpvVDZqeUhDaUpmN2xab3RSK3IyZEoxOXNyT1VWNlMKNUc0bDdtQ083WUwxbHZMdjAxQWF2L1F0K003R3B4WnVwNjBla1hyMWV6KzBxTHcyNGZiMUJxMUhEbTU4T0lrbwpYZXE0K25vL2grLzlNMGRwTytpRDNoWkhhMnQ0WXZHczhZdUVlYWMveHNVdVJEQTFYRVFpWUc3V052NXJJY2FRClBiRm5zMVpKT0F5blJCaUtuMlhWVndpMVExU2NzZTRNUXVyTWJpWkVVc3lGK3hURHQ3TmlGTGJKdUsvdXpISjcKVVpaSjhNQXRldk5adEtiK2xpQzdaS0ZQMXBjbW8xQ2tJZUxLakcxU2xBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBcys1N0pUMW1EZEllaFhOSnFtM0o1b25HRzVnRDRSSzV3cTh4SlV0cTY3ZEd4RmgvCjNkRHIrU3hJTmZBd3Bjc0NJdUpNVm9pWU9DVmVtaGlwNGlWWExUbVhKSWl2YU5OSEw3bmFZc3lQVGpic1BlbWYKYjRwNm4rc09WaGhrTTZ0aDVnUXNMdUVTK0NMT0tCM3hEd24wL1dwZVNiL1R1WFpvK3JSekhhQlJrV1IyRlFVOAoxa3lNYUw5QVlBUWw5SXZjY2o4K241OHowUWJIYk95SncxL3lQcGdialNCbWVxMnBmbFMxa2llUyt3dGtlcUtOCktoNXJKbFpyNzNnaUhKN3N6aENXNjBDb3RnR0JQQVNyZUNqZ2NGS2lpbjZQOVFZV2NaVFV3SjZWUmFpZWdFM1gKRWxnd1hhUVAyZkVOQzRiSW9mSWVZSG4rcUFKeWlxWk5jOXhOVndJREFRQUJBb0lCQUF5RDdZZmhGZXluTFYxTgo4QlZOTHFwODhjMHdqVENHRzJxcHdlcmNySks1dkUvaThmM3RUc1NWcW00cUIxQTQ1eXlpL2ZsVTVmV2R6ODg3CklQSHNjL3hlMFo4R2JPRUhOUi9pTndrQlBvU0x1SEgwQXBXQkZkZHl3NXdFZFUvTXYzSCszMDNoZE83U2lQRnMKWjd5S2prSmtPQ3U4RG8rTFozRHN4VWNOeEM2dkp0V1dCZUJ3MTBjZGVTamQ3Q0k0RUMyT081ODBaMDEzbUhaSApZQVErZTBxMVpCRGlBaU5CWG5uVW1ZRWhTcnV2SDNMd2ROVVRIUkZ5QmMyb3dtMGVVcWZER0dJNVhBeW5hOEdHClFpSXZjeXhINnUvQ1NDQjdGaG5xY0d0QnNPZksvNE5iYnk1cmFCYkRIRXVqNjJJZG9uaHZ5U2FwL3NtWjcxOGcKYU5tb2pRMENnWUVBMlNhVFl0ZXlYM0NmNDlTWmhzMW5yMldSMDBKL212RHlQS2JzU1NBWWFQbXZ5eHJleGd4ZAo5d0I0TkhBbnowUkoycGtGQ2dZZ1FGaEZsK29CVWQrYWdFUU1VZlhaV0t5MHVDUGtHWWQyaU5CczZGR3lzZVRtCngwWXRLMnJqd2ZjL1hHMThDUHA2Nzk5QW14VEh1b3VXbEJ6anBnZzhpNjdUcXVGbXBiRlR1TDBDZ1lFQTFCOUkKYUk1RnVvVWZpdW1sZWVJeC96QnRjY3dsNHZUQW5kL2ZDOGtoYmpDZnRxc0hYRm9DY0JLWC8vdVIzbzhrNEVjMgpQNytPU25KM01SZ3BWbWljVVhjKzNPZ05XK0tVZ1dIclMyaHNMZ2FwdGFLUEtvbGJjMlJSMHpDM0JvMVhzUGVkCkVkdG5nN1RTd25yWjZaQ2xBTzhSNnorYkxsQlVKN2VqT2VqUHNhTUNnWUE4RW5IZmZEQTZPdHZnbVNYSHB2Y3kKREhVazdsYUN0SGt1MGphM25BdGtydjQwdjhBMUphS3cvQTVFNDJuLzZySkxxTjArQXFmVlpSWUxpbzdHNlliQwpTUkRuYzQybS9GQWFTTU9IVkhRME1RU1AyRm9JNEh2L1VLaWFSRDJ4b1FhRU9UMkE5bG9nRmJDM3RpM3lxejhDCnhtTXJ3VWVPbE5TMWh4bHdhUGZ5T1FLQmdITjhGSS9YNVY2RzI0VmxieEhNZEN2YTBic0N5aDJsNHJnUkNmNEEKb3BLN0pqanRKRFREVEZCM3p3a3VqVnY5MHJYSUQyRGxpVEkrMzJWN0lnWkpMZEdzZWkwS3FUczlRRnl3VXNuYgpNQXBlMWtadEdrU3VRM3V2UWwwWVNJem9wclZTR2RGL0FmeFNsZXdMdGxmU3lBS2FKY2ROK2M1ZExYUHlKb3VBCmxKTEJBb0dBWTJrWjdwSjdzMEF3bVNqWmRxNkxYLzJhRFQzTVV6dXNSS29ZM3ZnVE9NVEJwcUVwV1JqRk9rNjMKVStjOWZLaml6RlN1WDlRdDNoN1ZPUlBQVk9Pby9zL0d6VUU5V0lzOGpYcjNMc0xZQTRjMXlxSW5oc0JkakFKdgpMOXh5alk0blFQNktPVjk4QjljTkN3Ymtja3F1MVdDZ2ZCbDRySFNqNytiU004a3FockE9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: gloo-platform/templates/cert.yaml
apiVersion: v1
kind: Secret
metadata:
  name: relay-server-tls-secret
  namespace: cnp-nginx
type: kubernetes.io/tls
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHekNDQWdPZ0F3SUJBZ0lRUUJyVXlReWZ4NDJhUElBVENNN1BtVEFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFERXcxeVpXeGhlUzF5YjI5MExXTmhNQjRYRFRJMU1EWXhNREUyTXprd01sb1hEVEkyTURZeApNREUyTXprd01sb3dHREVXTUJRR0ExVUVBeE1OY21Wc1lYa3RjbTl2ZEMxallUQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMUHVleVU5WmczU0hvVnpTYXB0eWVhSnhodVlBK0VTdWNLdk1TVkwKYXV1M1JzUllmOTNRNi9rc1NEWHdNS1hMQWlMaVRGYUltRGdsWHBvWXFlSWxWeTA1bHlTSXIyalRSeSs1Mm1MTQpqMDQyN0QzcG4yK0tlcC9yRGxZWVpET3JZZVlFTEM3aEV2Z2l6aWdkOFE4SjlQMXFYa20vMDdsMmFQcTBjeDJnClVaRmtkaFVGUE5aTWpHaS9RR0FFSmZTTDNISS9QcCtmTTlFR3gyenNpY05mOGo2WUc0MGdabnF0cVg1VXRaSW4Ka3ZzTFpIcWlqU29lYXlaV2ErOTRJaHllN000UWx1dEFxTFlCZ1R3RXEzZ280SEJTb29wK2ovVUdGbkdVMU1DZQpsVVdvbm9CTjF4SllNRjJrRDlueERRdUd5S0h5SG1CNS9xZ0Njb3FtVFhQY1RWY0NBd0VBQWFOaE1GOHdEZ1lEClZSMFBBUUgvQkFRREFnS2tNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlYKSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCU2ZCWXphSWpkVkRJeEtWOUFQU0dSSEIwVU5aVEFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQUdic3laUHh5SHdFWWdkREZvN0pRVDVVUGRWQkNMbndEdURCS3lFejJERVhoCmpxbVVwRmUwaWhWY2dIdkZjcmEwNjlQSmtpQ1BtWWhFOWpvVDZqeUhDaUpmN2xab3RSK3IyZEoxOXNyT1VWNlMKNUc0bDdtQ083WUwxbHZMdjAxQWF2L1F0K003R3B4WnVwNjBla1hyMWV6KzBxTHcyNGZiMUJxMUhEbTU4T0lrbwpYZXE0K25vL2grLzlNMGRwTytpRDNoWkhhMnQ0WXZHczhZdUVlYWMveHNVdVJEQTFYRVFpWUc3V052NXJJY2FRClBiRm5zMVpKT0F5blJCaUtuMlhWVndpMVExU2NzZTRNUXVyTWJpWkVVc3lGK3hURHQ3TmlGTGJKdUsvdXpISjcKVVpaSjhNQXRldk5adEtiK2xpQzdaS0ZQMXBjbW8xQ2tJZUxLakcxU2xBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURkakNDQWw2Z0F3SUJBZ0lSQUlvQVJzU0Q1T0xuczRNUTZhbHFsSEl3RFFZSktvWklodmNOQVFFTEJRQXcKR0RFV01CUUdBMVVFQXhNTmNtVnNZWGt0Y205dmRDMWpZVEFlRncweU5UQTJNVEF4TmpNNU1ETmFGdzB5TmpBMgpNVEF4TmpNNU1ETmFNQ0F4SGpBY0JnTlZCQU1URldkc2IyOHRiV1Z6YUMxdFoyMTBMWE5sY25abGNqQ0NBU0l3CkRRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMVFlMbFBId1R2clJFdE5VL0VQVGl5c1FUb2MKMEdKSGtaTWJpdzBES1U0YzVBbURFSStNMitsbkpYc3d1VkZCQ3ZzNFhwd09JaU4vYWFYQ1MvQUtyWW4xS1JDegoraDBlNlVoWHFCRUJGWjlzbW0xbkZVZmJmUG0xRmZ3Mk85SSthUTJTdmZuT0FEaEtRdVFPN0NEYWRCajlhdTd6ClptOVdjY0JHK0IyTzZlaWZEN0VxU0FWbEFIRzlFUTFpM1B4MENtMVRIV21JS2ZYMlFUMnEzd24wWDNIMnE0cmUKLzNSSktQRG9sU1haNkl0NHpoMCtvMm5hSzF0Z3kzc3RqUm1iM3RIS2xXQXoycTJDMkMrZjIxc0JQQ3Q2MytGNwpIS0sySFEyV0NJL0oranBWT0JJclZSenFGWUxTUTUrYk5wcy9lR0wzVnF4dW93TFVidkErQ0pSUzVOc0NBd0VBCkFhT0JzakNCcnpBT0JnTlZIUThCQWY4RUJBTUNCYUF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0cKQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVud1dNMmlJM1ZReU1TbGZRRDBoawpSd2RGRFdVd1R3WURWUjBSQkVnd1JvSWZaMnh2YnkxdFpYTm9MVzFuYlhRdGMyVnlkbVZ5TG1OdWNDMXVaMmx1CmVJSWpaMnh2YnkxdFpYTm9MVzFuYlhRdGMyVnlkbVZ5TG1OdWNDMXVaMmx1ZUM1emRtTXdEUVlKS29aSWh2Y04KQVFFTEJRQURnZ0VCQUVPcVNYaG1jazZyVTFGQWZ2am9udG9HTHpTOEUyZDJnZkpUcWhoZXhDT0poaTYwblo4VApLaWpVZ1VwQzFPaGFrMlpONXhPOGxiZHlid2prWThGeDVsbUc4RXNBM2xPQm5zYWt6V0NMdTNMTVgwTGdjcFVvCmN4YXBBbDdZRDh6VFViQzV1R21Mbm9BcUNkczRPVjVCdEtlZUVpblFScVg0YlJ5RTBHQ1lNRC9ZV3lMY2JKemgKckg0MnRKVGdxQkFRL2hhMXo3KzI2M3VzbUFXWE0xaUgxQXdIMlBhU2pDc3h1aEZOWURKZ1pvMThYUkNya0VZTQp4bVlqZkF0OTlTR1BRVmlsc2pWZlRMYUJjR3NBc1pLQzBiUWk4ODdKMXhGM3QzMXFPdmxwdzV4UlpmdWZoRXpZCjNMK0ZBaHV3SU85cE5ValVwWEJYZjZNZ0FLeEZJbnhHeXd3PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdE5ndVU4ZkJPK3RFUzAxVDhROU9MS3hCT2h6UVlrZVJreHVMRFFNcFRoemtDWU1RCmo0emI2V2NsZXpDNVVVRUsremhlbkE0aUkzOXBwY0pMOEFxdGlmVXBFTFA2SFI3cFNGZW9FUUVWbjJ5YWJXY1YKUjl0OCtiVVYvRFk3MGo1cERaSzkrYzRBT0VwQzVBN3NJTnAwR1AxcTd2Tm1iMVp4d0ViNEhZN3A2SjhQc1NwSQpCV1VBY2IwUkRXTGMvSFFLYlZNZGFZZ3A5ZlpCUGFyZkNmUmZjZmFyaXQ3L2RFa284T2lWSmRub2kzak9IVDZqCmFkb3JXMkRMZXkyTkdadmUwY3FWWURQYXJZTFlMNS9iV3dFOEszcmY0WHNjb3JZZERaWUlqOG42T2xVNEVpdFYKSE9vVmd0SkRuNXMybXo5NFl2ZFdyRzZqQXRSdThENElsRkxrMndJREFRQUJBb0lCQUErR1IyUFYwQmJPdVl3bApWVUZxYVBHWXovaW5KSlJyUkduMmdWZGFvQjhlaDh6eFBXaTFWT09TZ1RzMEVaU1NHdGs2RzVVVitZUkdtZEVxCi9zM2FmTTlOQm50eWw5UU1KVWFhajhqMTZOOUl1WEVPMmxyUzBzVzA3L0E0ejZYYXliWHFsUGh1NE1IMFRnMjUKNGpkbnlYT2p2WnhKdE05MkFrblpUYzlyeDFTNnZlQU0yV0N6ZXdqMWtWdjZhOGJkdFFCZVZRS3VJS25DU3ZxVAozZGM0Njl2amFBdHQ0ZmFDZkhEZ0tYRmk5cHY2TFlVbW55bi9DM2xPcnFMeGRxYWVPK2dUbEwvRzFaNEk4MC9LCmlKNk5jZStRdlpMK0J6ak10bXpFZjB4RGsrVEUxNFN2eGpOcTU4UkEvL29hVjJXY1NZbEhWNDRwdi83UlMrN2YKQkJIcng1RUNnWUVBeWY3ZFBRQk1RL0s5cllYN2g2VzkwbVpFQWYyaGFHWW9qRXJ2MC82YWRibTd3cUtuSnVqZgpqQkxiMU05cENjZlJnRWxwQ0hSZnh1YkxHbFNoR2xudWdIWEwvZFcwL3RZRXh3WS9mbFEra3RpbFYxajhFUXljCmxqcWtlSnAxRUNRQlRDTUhoTktmNVNtcWZnRFlZeExKQ2xJLzg4bG4zMkY5RlZONEpBSmpFaDBDZ1lFQTVUR3QKSytUQUc4Sm4yV2NEOTBWYVpsaWhlUnlWVmVnZ2ZSOHhzaXhDdjR3STNBbUhtRWJHQ0JuKzBCb3RLVy83c0lJeQpEWmt3UHlCODhOOHlBYmNzWTUraW8yYW9lZUUwU25ZeFMybXVXRWcvSTdYdEp4K2M0amU4Z0xuR0htWmhNZ2UrClpId2NXK010T01pYi9VNlkzbm8rVDI4ZHlCQlBUcThjOFZ2NklWY0NnWUFWT1VnNXJweFV6MTZLcXZkQXkzTmsKZGdaVFJ6ajhaUytCZmlZdzJpR1VtUTFYYUF1MEZPZllLZXNiTXlmUU5VU1gvQjZqR3NjdGVQYUNMNzQxckpsWQp1Z2ZUQmU5Y2oxUTFMVHppb3l0bjlvZDQ1QXFvSi9FVC85bGtLcVorS2FwUk82VUFtYmpmTlQrS3VjQUN1T2lTCnd3MmhLZHBXS0VJaVNZRG9GN0FkS1FLQmdRQ3Jpdzd1TjN5Q1NuT29DSzZ6T0xsOHVRSEN3RjRWdW5QMnNvNWoKcVRVY1lSZVFlYUYvbkJsRW54QlZlZ0lyYmFHWWJ4by9pMVROS3VmWThYVmdTMVZ5QzEyVHA1YWFBckU4dWxJUworN3ArWVRUQTZiM2k5b3BaMXhYRDAwZ3lJTGJHMTN6dGdPZEk3elE5dUFqcEF4YndEZGJ0WldHSkNJd1RmSVhSCk1PSjZhUUtCZ0hOaTVQQnJ0eUNxb1lMVTVBU0lPcUthNitwaE5ZNzdrNks0eUVMNk1uK3BwTUYyU082eWRFZnQKTVZBUndRVWNZaUpPYlYzN2dWOC85TWFJcytueCtVS1c2N3NsSHBhU2VhUEpoWnhSOWNMUDBGaHpZNHdtN0VKVwpISmpBSFZtMjhxVDNKeG42aml3Yk9wVHBvK2ViY3RpRXJrNmV3enJVVXJHTFIrSndjdHd4Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: gloo-platform/templates/cert.yaml
apiVersion: v1
kind: Secret
metadata:
  name: relay-tls-signing-secret
  namespace: cnp-nginx
type: kubernetes.io/tls
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHekNDQWdPZ0F3SUJBZ0lRUUJyVXlReWZ4NDJhUElBVENNN1BtVEFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFERXcxeVpXeGhlUzF5YjI5MExXTmhNQjRYRFRJMU1EWXhNREUyTXprd01sb1hEVEkyTURZeApNREUyTXprd01sb3dHREVXTUJRR0ExVUVBeE1OY21Wc1lYa3RjbTl2ZEMxallUQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMUHVleVU5WmczU0hvVnpTYXB0eWVhSnhodVlBK0VTdWNLdk1TVkwKYXV1M1JzUllmOTNRNi9rc1NEWHdNS1hMQWlMaVRGYUltRGdsWHBvWXFlSWxWeTA1bHlTSXIyalRSeSs1Mm1MTQpqMDQyN0QzcG4yK0tlcC9yRGxZWVpET3JZZVlFTEM3aEV2Z2l6aWdkOFE4SjlQMXFYa20vMDdsMmFQcTBjeDJnClVaRmtkaFVGUE5aTWpHaS9RR0FFSmZTTDNISS9QcCtmTTlFR3gyenNpY05mOGo2WUc0MGdabnF0cVg1VXRaSW4Ka3ZzTFpIcWlqU29lYXlaV2ErOTRJaHllN000UWx1dEFxTFlCZ1R3RXEzZ280SEJTb29wK2ovVUdGbkdVMU1DZQpsVVdvbm9CTjF4SllNRjJrRDlueERRdUd5S0h5SG1CNS9xZ0Njb3FtVFhQY1RWY0NBd0VBQWFOaE1GOHdEZ1lEClZSMFBBUUgvQkFRREFnS2tNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlYKSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCU2ZCWXphSWpkVkRJeEtWOUFQU0dSSEIwVU5aVEFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQUdic3laUHh5SHdFWWdkREZvN0pRVDVVUGRWQkNMbndEdURCS3lFejJERVhoCmpxbVVwRmUwaWhWY2dIdkZjcmEwNjlQSmtpQ1BtWWhFOWpvVDZqeUhDaUpmN2xab3RSK3IyZEoxOXNyT1VWNlMKNUc0bDdtQ083WUwxbHZMdjAxQWF2L1F0K003R3B4WnVwNjBla1hyMWV6KzBxTHcyNGZiMUJxMUhEbTU4T0lrbwpYZXE0K25vL2grLzlNMGRwTytpRDNoWkhhMnQ0WXZHczhZdUVlYWMveHNVdVJEQTFYRVFpWUc3V052NXJJY2FRClBiRm5zMVpKT0F5blJCaUtuMlhWVndpMVExU2NzZTRNUXVyTWJpWkVVc3lGK3hURHQ3TmlGTGJKdUsvdXpISjcKVVpaSjhNQXRldk5adEtiK2xpQzdaS0ZQMXBjbW8xQ2tJZUxLakcxU2xBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHekNDQWdPZ0F3SUJBZ0lRUUJyVXlReWZ4NDJhUElBVENNN1BtVEFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFERXcxeVpXeGhlUzF5YjI5MExXTmhNQjRYRFRJMU1EWXhNREUyTXprd01sb1hEVEkyTURZeApNREUyTXprd01sb3dHREVXTUJRR0ExVUVBeE1OY21Wc1lYa3RjbTl2ZEMxallUQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMUHVleVU5WmczU0hvVnpTYXB0eWVhSnhodVlBK0VTdWNLdk1TVkwKYXV1M1JzUllmOTNRNi9rc1NEWHdNS1hMQWlMaVRGYUltRGdsWHBvWXFlSWxWeTA1bHlTSXIyalRSeSs1Mm1MTQpqMDQyN0QzcG4yK0tlcC9yRGxZWVpET3JZZVlFTEM3aEV2Z2l6aWdkOFE4SjlQMXFYa20vMDdsMmFQcTBjeDJnClVaRmtkaFVGUE5aTWpHaS9RR0FFSmZTTDNISS9QcCtmTTlFR3gyenNpY05mOGo2WUc0MGdabnF0cVg1VXRaSW4Ka3ZzTFpIcWlqU29lYXlaV2ErOTRJaHllN000UWx1dEFxTFlCZ1R3RXEzZ280SEJTb29wK2ovVUdGbkdVMU1DZQpsVVdvbm9CTjF4SllNRjJrRDlueERRdUd5S0h5SG1CNS9xZ0Njb3FtVFhQY1RWY0NBd0VBQWFOaE1GOHdEZ1lEClZSMFBBUUgvQkFRREFnS2tNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlYKSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCU2ZCWXphSWpkVkRJeEtWOUFQU0dSSEIwVU5aVEFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQUdic3laUHh5SHdFWWdkREZvN0pRVDVVUGRWQkNMbndEdURCS3lFejJERVhoCmpxbVVwRmUwaWhWY2dIdkZjcmEwNjlQSmtpQ1BtWWhFOWpvVDZqeUhDaUpmN2xab3RSK3IyZEoxOXNyT1VWNlMKNUc0bDdtQ083WUwxbHZMdjAxQWF2L1F0K003R3B4WnVwNjBla1hyMWV6KzBxTHcyNGZiMUJxMUhEbTU4T0lrbwpYZXE0K25vL2grLzlNMGRwTytpRDNoWkhhMnQ0WXZHczhZdUVlYWMveHNVdVJEQTFYRVFpWUc3V052NXJJY2FRClBiRm5zMVpKT0F5blJCaUtuMlhWVndpMVExU2NzZTRNUXVyTWJpWkVVc3lGK3hURHQ3TmlGTGJKdUsvdXpISjcKVVpaSjhNQXRldk5adEtiK2xpQzdaS0ZQMXBjbW8xQ2tJZUxLakcxU2xBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBcys1N0pUMW1EZEllaFhOSnFtM0o1b25HRzVnRDRSSzV3cTh4SlV0cTY3ZEd4RmgvCjNkRHIrU3hJTmZBd3Bjc0NJdUpNVm9pWU9DVmVtaGlwNGlWWExUbVhKSWl2YU5OSEw3bmFZc3lQVGpic1BlbWYKYjRwNm4rc09WaGhrTTZ0aDVnUXNMdUVTK0NMT0tCM3hEd24wL1dwZVNiL1R1WFpvK3JSekhhQlJrV1IyRlFVOAoxa3lNYUw5QVlBUWw5SXZjY2o4K241OHowUWJIYk95SncxL3lQcGdialNCbWVxMnBmbFMxa2llUyt3dGtlcUtOCktoNXJKbFpyNzNnaUhKN3N6aENXNjBDb3RnR0JQQVNyZUNqZ2NGS2lpbjZQOVFZV2NaVFV3SjZWUmFpZWdFM1gKRWxnd1hhUVAyZkVOQzRiSW9mSWVZSG4rcUFKeWlxWk5jOXhOVndJREFRQUJBb0lCQUF5RDdZZmhGZXluTFYxTgo4QlZOTHFwODhjMHdqVENHRzJxcHdlcmNySks1dkUvaThmM3RUc1NWcW00cUIxQTQ1eXlpL2ZsVTVmV2R6ODg3CklQSHNjL3hlMFo4R2JPRUhOUi9pTndrQlBvU0x1SEgwQXBXQkZkZHl3NXdFZFUvTXYzSCszMDNoZE83U2lQRnMKWjd5S2prSmtPQ3U4RG8rTFozRHN4VWNOeEM2dkp0V1dCZUJ3MTBjZGVTamQ3Q0k0RUMyT081ODBaMDEzbUhaSApZQVErZTBxMVpCRGlBaU5CWG5uVW1ZRWhTcnV2SDNMd2ROVVRIUkZ5QmMyb3dtMGVVcWZER0dJNVhBeW5hOEdHClFpSXZjeXhINnUvQ1NDQjdGaG5xY0d0QnNPZksvNE5iYnk1cmFCYkRIRXVqNjJJZG9uaHZ5U2FwL3NtWjcxOGcKYU5tb2pRMENnWUVBMlNhVFl0ZXlYM0NmNDlTWmhzMW5yMldSMDBKL212RHlQS2JzU1NBWWFQbXZ5eHJleGd4ZAo5d0I0TkhBbnowUkoycGtGQ2dZZ1FGaEZsK29CVWQrYWdFUU1VZlhaV0t5MHVDUGtHWWQyaU5CczZGR3lzZVRtCngwWXRLMnJqd2ZjL1hHMThDUHA2Nzk5QW14VEh1b3VXbEJ6anBnZzhpNjdUcXVGbXBiRlR1TDBDZ1lFQTFCOUkKYUk1RnVvVWZpdW1sZWVJeC96QnRjY3dsNHZUQW5kL2ZDOGtoYmpDZnRxc0hYRm9DY0JLWC8vdVIzbzhrNEVjMgpQNytPU25KM01SZ3BWbWljVVhjKzNPZ05XK0tVZ1dIclMyaHNMZ2FwdGFLUEtvbGJjMlJSMHpDM0JvMVhzUGVkCkVkdG5nN1RTd25yWjZaQ2xBTzhSNnorYkxsQlVKN2VqT2VqUHNhTUNnWUE4RW5IZmZEQTZPdHZnbVNYSHB2Y3kKREhVazdsYUN0SGt1MGphM25BdGtydjQwdjhBMUphS3cvQTVFNDJuLzZySkxxTjArQXFmVlpSWUxpbzdHNlliQwpTUkRuYzQybS9GQWFTTU9IVkhRME1RU1AyRm9JNEh2L1VLaWFSRDJ4b1FhRU9UMkE5bG9nRmJDM3RpM3lxejhDCnhtTXJ3VWVPbE5TMWh4bHdhUGZ5T1FLQmdITjhGSS9YNVY2RzI0VmxieEhNZEN2YTBic0N5aDJsNHJnUkNmNEEKb3BLN0pqanRKRFREVEZCM3p3a3VqVnY5MHJYSUQyRGxpVEkrMzJWN0lnWkpMZEdzZWkwS3FUczlRRnl3VXNuYgpNQXBlMWtadEdrU3VRM3V2UWwwWVNJem9wclZTR2RGL0FmeFNsZXdMdGxmU3lBS2FKY2ROK2M1ZExYUHlKb3VBCmxKTEJBb0dBWTJrWjdwSjdzMEF3bVNqWmRxNkxYLzJhRFQzTVV6dXNSS29ZM3ZnVE9NVEJwcUVwV1JqRk9rNjMKVStjOWZLaml6RlN1WDlRdDNoN1ZPUlBQVk9Pby9zL0d6VUU5V0lzOGpYcjNMc0xZQTRjMXlxSW5oc0JkakFKdgpMOXh5alk0blFQNktPVjk4QjljTkN3Ymtja3F1MVdDZ2ZCbDRySFNqNytiU004a3FockE9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: gloo-platform/templates/cert.yaml
apiVersion: v1
kind: Secret
metadata:
  name: relay-identity-token-secret
  namespace: cnp-nginx
data:
  token: NnpLQkhwOXNITUNYaWlOWQ==


# Make metrics(otel) cert if it doesn't exist
# If CA is not disabled; metrics are enabled, and disableCertGeneration is false
# then we create the metrics gateway certificate





# Server cert doesn't exist, generate a new one










 # TODO don't hard-code common name
---
# Source: gloo-platform/templates/cert.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gloo-telemetry-gateway-tls-secret
  namespace: cnp-nginx
type: kubernetes.io/tls
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURHekNDQWdPZ0F3SUJBZ0lRUUJyVXlReWZ4NDJhUElBVENNN1BtVEFOQmdrcWhraUc5dzBCQVFzRkFEQVkKTVJZd0ZBWURWUVFERXcxeVpXeGhlUzF5YjI5MExXTmhNQjRYRFRJMU1EWXhNREUyTXprd01sb1hEVEkyTURZeApNREUyTXprd01sb3dHREVXTUJRR0ExVUVBeE1OY21Wc1lYa3RjbTl2ZEMxallUQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMUHVleVU5WmczU0hvVnpTYXB0eWVhSnhodVlBK0VTdWNLdk1TVkwKYXV1M1JzUllmOTNRNi9rc1NEWHdNS1hMQWlMaVRGYUltRGdsWHBvWXFlSWxWeTA1bHlTSXIyalRSeSs1Mm1MTQpqMDQyN0QzcG4yK0tlcC9yRGxZWVpET3JZZVlFTEM3aEV2Z2l6aWdkOFE4SjlQMXFYa20vMDdsMmFQcTBjeDJnClVaRmtkaFVGUE5aTWpHaS9RR0FFSmZTTDNISS9QcCtmTTlFR3gyenNpY05mOGo2WUc0MGdabnF0cVg1VXRaSW4Ka3ZzTFpIcWlqU29lYXlaV2ErOTRJaHllN000UWx1dEFxTFlCZ1R3RXEzZ280SEJTb29wK2ovVUdGbkdVMU1DZQpsVVdvbm9CTjF4SllNRjJrRDlueERRdUd5S0h5SG1CNS9xZ0Njb3FtVFhQY1RWY0NBd0VBQWFOaE1GOHdEZ1lEClZSMFBBUUgvQkFRREFnS2tNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlYKSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCU2ZCWXphSWpkVkRJeEtWOUFQU0dSSEIwVU5aVEFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVFFQUdic3laUHh5SHdFWWdkREZvN0pRVDVVUGRWQkNMbndEdURCS3lFejJERVhoCmpxbVVwRmUwaWhWY2dIdkZjcmEwNjlQSmtpQ1BtWWhFOWpvVDZqeUhDaUpmN2xab3RSK3IyZEoxOXNyT1VWNlMKNUc0bDdtQ083WUwxbHZMdjAxQWF2L1F0K003R3B4WnVwNjBla1hyMWV6KzBxTHcyNGZiMUJxMUhEbTU4T0lrbwpYZXE0K25vL2grLzlNMGRwTytpRDNoWkhhMnQ0WXZHczhZdUVlYWMveHNVdVJEQTFYRVFpWUc3V052NXJJY2FRClBiRm5zMVpKT0F5blJCaUtuMlhWVndpMVExU2NzZTRNUXVyTWJpWkVVc3lGK3hURHQ3TmlGTGJKdUsvdXpISjcKVVpaSjhNQXRldk5adEtiK2xpQzdaS0ZQMXBjbW8xQ2tJZUxLakcxU2xBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR3RENDQXFpZ0F3SUJBZ0lSQU1TUzVGR1FFODlUQ3BLaWl3NU4yMjh3RFFZSktvWklodmNOQVFFTEJRQXcKR0RFV01CUUdBMVVFQXhNTmNtVnNZWGt0Y205dmRDMWpZVEFlRncweU5UQTJNVEF4TmpNNU1ETmFGdzB5TmpBMgpNVEF4TmpNNU1ETmFNQ0V4SHpBZEJnTlZCQU1URm1kc2IyOHRkR1ZzWlcxbGRISjVMV2RoZEdWM1lYa3dnZ0VpCk1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRRHFRTW4yeWJBa1BXUkt0bzViUkplME1XaTMKRmJ6WnY5SVdRVW1vWm16THhsUDFJK0xWK3psZk5nNTEyaE5kRGdSUCszYW5iWEg5R0l6M0ZUTzBKUytPMVVNdwpISDhFSG5TTHpiWDdmN0NLZVR2cE1Ea0g0N0V5eVhDZDJzQ3k1UlR6WXRMRXNUdUkwdnR2ZmdMSTIvb1NuVTJVCmZ6VXJBcG8yVXZnM0YyZ20xRFJTRnJGR0Z3Vkl2VkQrcWZVOGFuS2w4QkUxRHpqK2xJY0Vscy9TVzBwL3U1Q3gKTGUrRFhnZEFHYjE3YVh5MGVQTFJNcG1KbTZoSzYrWHZKR1BRRm9vQ0lkMExDai9RczVVOGVUb3BINlJDR0J5ZApNVG5QRUpEM3lNRU9CQnBIZDh1eElFRlBHOXFoQXR3RVdXZklqUXFVVUpDNGMvOU00MDBSbzVSNTRsMFBBZ01CCkFBR2pnZnN3Z2Znd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1COEdBMVVkSXdRWU1CYUFGSjhGak5vaU4xVU1qRXBYMEE5SQpaRWNIUlExbE1JR1hCZ05WSFJFRWdZOHdnWXlDSUdkc2IyOHRkR1ZzWlcxbGRISjVMV2RoZEdWM1lYa3VaMnh2CmJ5MXRaWE5vZ2lSbmJHOXZMWFJsYkdWdFpYUnllUzFuWVhSbGQyRjVMbWRzYjI4dGJXVnphQzV6ZG1PQ0htZHMKYjI4dGJXVjBjbWxqY3kxbllYUmxkMkY1TG1OdWNDMXVaMmx1ZUlJaVoyeHZieTF0WlhSeWFXTnpMV2RoZEdWMwpZWGt1WTI1d0xXNW5hVzU0TG5OMll6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFjRkx1Q0d3TEpacmdBZVRXCmxVc1ZFZTNvbDNPWEsyeTNuK0gxQ3hsekZIZTcyeTA0YVQ4M1JudzVWdGM4V3VkZTJMVExNNHJDVzN6L2tYMlEKQXFwSlhvSHRaT25oUmtsQU1lVjdpQnVXNmR2Nk1scm5pSldvMzMyWWRVTnVjaWJ4SnNoeE1vNjNieWhyVUFIYQpmZlNvdW5wd2k1VzMvbEhEL2VOZWlMb0NGSVFxb2VSdGR6OFV5ZHcrbGhGcURybkRzd2dDdUMxaW1odC8waVcyCjZzR1d1WTgvQW85ZmY0NGN2aE54VXVqTmpvcVZlNGp2c1M4Z2dxajdBS3JUTHB4VVhKVHpYcHBUcE05dTdtVXMKcjFhSE43Vm44VUdaM053dVBsRzBjMDdURThpdkYvMEEvV1FCSDlJaXRtWm9YbjN4R0Zwc2E1WGZNbUNuZlczcwpvYktlZVE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNmtESjlzbXdKRDFrU3JhT1cwU1h0REZvdHhXODJiL1NGa0ZKcUdac3k4WlQ5U1BpCjFmczVYellPZGRvVFhRNEVUL3QycDIxeC9SaU05eFV6dENVdmp0VkRNQngvQkI1MGk4MjErMyt3aW5rNzZUQTUKQitPeE1zbHduZHJBc3VVVTgyTFN4TEU3aU5MN2IzNEN5TnY2RXAxTmxIODFLd0thTmxMNE54ZG9KdFEwVWhheApSaGNGU0wxUS9xbjFQR3B5cGZBUk5RODQvcFNIQkpiUDBsdEtmN3VRc1MzdmcxNEhRQm05ZTJsOHRIankwVEtaCmladW9TdXZsN3lSajBCYUtBaUhkQ3dvLzBMT1ZQSGs2S1Ira1FoZ2NuVEU1enhDUTk4akJEZ1FhUjNmTHNTQkIKVHh2YW9RTGNCRmxueUkwS2xGQ1F1SFAvVE9OTkVhT1VlZUpkRHdJREFRQUJBb0lCQUFFN1dPcmMzZi9FUm9ISQp4UXNDdExONHlFQ0kwbTB6TEZyczZDeWxrcUlrL2JTak5iSVdhY01mbU8wMzBhS1M2aUlCMFk5czVxR05DblBqCndKVXRUU2xsU0lrOEtXZloxa09wa1VvWGxNM1NvZnpKY1dqcDFyNzJRRnRJbk5waFh2eXJpeTRacDNldFptVFoKeEZmN1R6aTJFZU5HamRVTFRQNThkbmFwZDlrdTFPOU4rcEdOVGpRZ01XNWI5NGtjc00vSEFoazJNYmdwR2hEcgp6Wit3RDB3UzVZOTFKd2tRT3RyWk1TL1ZRWitobTlWdE9TQ0JFSVMyV3hzU3VSaFdzSEN0cFArWTNZaEUvLysvCjlPN2xJNk85SkZEU0wxZzBpcjRUMnROQ1h0VmJja05lRWZDUisyM0UxL2Y5OER2bEl2Qjd1MHdHY0NTU3l6L2sKVnh6K1hDa0NnWUVBOGt4WnhpZ2k1KzBBTkUvWXpCcGtra0tZZFhJRnBmN04yOVJhK29EQmRkVVJtNUh2c3d5dQpUYzBHdWZXS1ZPbmxDZjM5SWg0eGRMd1B3Zy9KTm42Q1FmcDc3eTFPN3BiOENza1QxVmFhOThqako2MHc5RFJzCkpETDk2T3VZbTRUZlVhRjNNeGxUV2VFNDVtWlVhVzdBTkl4Mm5Hd2xhaDRLTUFqejNobjRqdFVDZ1lFQTkzLzQKeU5paXZZcUpOL0tFS0Q2NHV3M3BrbCtrdlJ5SW8xenZacFZVY3FLQkZIUjhDd2pjaHhZUWpVR01NSHBSV1Rtbwo3ODRlN3lpcTFYaGlxNStERlk0cysvMk16WXBwTkxvNDY5bmdJTnd6UFpiMHV1T0J0TWNVQWV5MFU4cTdUeDJHCjBBY1lRMHZsSTFpQkdsdEZEai83RkJNdldHOW1mSHphOHJwTzFsTUNnWUVBcDlhVmxUcjJPdnVqMlppNXoyQTAKN0Urdk5pT2VvQWFwNkszbnU0QjNBajF1cmZuZ05ZSUNONmhmRVc5eHZESXMwc2dha1lpaXIzOFoxMDZDRGZxQwpGbHdCZjRNK0d1MkJkNk1qMXZMZjgrWTIyNlFQdGdtZUkxRWpLellQaHlMNllweGJhbzBQZk1JVFhSM2pPUWxiCm9NcnYycGpiTGUvVEZNVU8wSG5qQUdVQ2dZRUE5dDZFN3dGM1FveGUxcGxtVFNaUzZQRzFtelVmZ3lwaytGNEkKeFZBS1RkWGQzdU5abjBBVmlBRHdQWlcyR2R6SUs3R2gycURFcGxUd0ljSFUyYzlmMXk1Ym5IYUo3Yk16d1U1RwozS29VTDNLMUFhZ0RNQzhoLzRuYllSZ1R2c2luRVFFb3FYT0tOZ1lMNXJldS92VXU2a25UVFhEZGR0NlhZWERBCmpBQmVCdFVDZ1lFQWxwMlh5M0pkQXczU2hBVzVZQTdVTFRSeHErZ05DWTJHVTdUZ3BYRUtNd0srdHNDZnNPd3AKUi9zUUVDMUpWa2FpOE1Dci9JekNDUW44N3MrZzlWRE1Nc0Jzay9HZEtHMmk0QkdYZzlQUVlIekVTdkMxa2tTKwpwK0x6eGNSWHFlRkg0RU9UQ1h3SDJCb2FOOGVkZTh5Unkrb1h3Lyt0UjhBazFJTEdlVEplUHVrPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: gloo-platform/templates/licenses.yaml
# The logic here is that we will write out a license secret if:
# - No license secret with the name “license-keys” exist
# - A license secret with name “license-keys” AND the annotation “meta.helm.sh/release-name”=[release] exists.
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: license-keys
  namespace: cnp-nginx
data:
  gloo-mesh-license-key: "ZXlKaFpHUlBibk1pT2x0ZExDSmxlSEFpT2pFM09UazROamd5T1RNc0ltbGhkQ0k2TVRjek5qYzVOakk1TXl3aWF5STZJa3BOTm1OclVTSXNJbXgwSWpvaVpXNTBJaXdpY0hKdlpIVmpkQ0k2SW1kc2IyOHRiV1Z6YUNKOS41VjVBX0FZX1BUV0NvQ0IzQUNLM0M3aXJ0NUdsMnowMmJ0T1oxMWNqTi04"
  gloo-network-license-key: ""
  gloo-gateway-license-key: ""
  gloo-trial-license-key: ""
  gloo-core-license-key: ""
---
# Source: gloo-platform/templates/prometheus-config.yaml
apiVersion: v1
kind: Secret
metadata:
  name: gloo-prometheus-server
  namespace: cnp-nginx
stringData:
  alerting_rules.yml: |
    groups:
    - name: GlooPlatformAlerts
      rules:
      - alert: GlooPlatformClustersNotWarming
        annotations:
          summary: Safe Mode has been active for more then 10 minutes for {{ $labels.cluster }}. Check on agent to see why it is not connecting. Translation will not proceed until it can warm or is manually excluded from traslation context via skipWarming on the KubernetesCluster object.
        expr: count by(cluster) (sum by(cluster) (gloo_mesh_safe_mode_active != 0)) > 0
        for: 10m
        labels:
          severity: error
      - alert: GlooPlatformTranslationLatencyIsHigh
        annotations:
          runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
          summary: The translation time has increased above 10 sec. It's currently {{ $value | humanize }}.
        expr: histogram_quantile(0.99, sum(rate(gloo_mesh_translation_time_sec_bucket[5m])) by(le)) > 10
        for: 15m
        labels:
          severity: warning
      - alert: GlooPlatformReconscilerLatencyIsHigh
        annotations:
          runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
          summary: The reconciliation time has increased above 80 sec. It's currently {{ $value | humanize }}.
        expr: histogram_quantile(0.99, sum(rate(gloo_mesh_reconciler_time_sec_bucket[5m])) by(le)) > 80
        for: 15m
        labels:
          severity: warning
      - alert: GlooPlatformAgentsAreDisconnected
        annotations:
          runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
          summary: 'The following cluster is disconnected: {{ $labels.cluster }}. Check the Gloo Platform Agent pod in the cluster!'
        expr: count by(cluster) (sum by(cluster) (relay_push_clients_warmed == 0)) > 0
        for: 5m
        labels:
          severity: warning
      - alert: GlooPlatformTranslationWarnings
        annotations:
          runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
          summary: Gloo Platform has detected {{ $value | humanize }} translation warnings in the last 5m. Check your {{ $labels.gvk }} resources!
        expr: increase(translation_warning[5m]) > 0
        labels:
          severity: warning
      - alert: GlooPlatformTranslationErrors
        annotations:
          runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
          summary: Gloo Platform has detected {{ $value | humanize }} translation errors in the last 5m. Check your {{ $labels.gvk }} resources!
        expr: increase(translation_error[5m]) > 0
        labels:
          severity: warning
      - alert: GlooPlatformRedisErrors
        annotations:
          runbook: https://docs.solo.io/gloo-mesh-enterprise/main/troubleshooting/gloo/
          summary: Gloo Platform has detected {{ $value | humanize }} Redis sync errors in the last 5m.
        expr: increase(gloo_mesh_redis_sync_err[5m]) > 0
        labels:
          severity: warning
  prometheus.yml: |
    rule_files:
    - /etc/config/recording_rules.yml
    - /etc/config/alerting_rules.yml
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
    - job_name: prometheus
      static_configs:
      - targets:
        - localhost:9090
    - job_name: otel-collector
      honor_labels: true
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - cnp-nginx
      scrape_interval: 15s
      scrape_timeout: 15s
      relabel_configs:
      - action: keep
        regex: standalone-collector|agent-collector
        source_labels:
        - __meta_kubernetes_pod_label_component
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - action: drop
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape_slow
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      # Supporting both IPv4 and IPv6
      - action: replace
        regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
        replacement: '[$2]:$1'
        source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_port
          - __meta_kubernetes_pod_ip
        target_label: __address__
      - action: replace
        regex: (\d+);((([0-9]+?)(\.|$)){4})
        replacement: $2:$1
        source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_port
          - __meta_kubernetes_pod_ip
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
        replacement: __param_$1
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: collector_pod
      - action: drop
        regex: Pending|Succeeded|Failed|Completed
        source_labels:
        - __meta_kubernetes_pod_phase
      # Drop labels
      metric_relabel_configs:
      - action: labeldrop
        regex: app_kubernetes_io_instance|app_kubernetes_io_name|instance|job|pod_template_hash
---
# Source: gloo-platform/templates/envoy-configmap.yaml
# ConfigMap containing envoy yaml
# ConfigMap dashboard-envoy
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: dashboard
    configmap: dashboard-envoy
  name: dashboard-envoy
  namespace: cnp-nginx
data:
  config.yaml: |2-    
    
    # Required comment so SKv2-rendered config map works properly. First line is extra indented, so need to be a comment.
    static_resources:
      listeners:
        - name: listener_0
          address:
            socket_address:
              address: "::"
              ipv4_compat: true
              port_value: 8090
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    codec_type: AUTO
                    stat_prefix: ingress_http
                    route_config:
                      name: gloo-mesh
                      virtual_hosts:
                        - name: gloo-mesh
                          domains: ["*"]
                          typed_per_filter_config:
                            envoy.filters.http.ext_authz:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                              check_settings:
                                context_extensions:
                                  # The server uses this to determine which AuthService to use to authorize requests
                                  config_id: gloo-mesh-settings
                          routes:
                            # gRPC requests go to the API server
                            - match:
                                prefix: "/"
                                headers:
                                  - name: content-type
                                    prefix_match: application/grpc
                              route:
                                cluster: gloo-mesh-apiserver
                                timeout: 60s
                            # Disable auth for the welcome screen and required static assets
                            - match:
                                safe_regex:
                                  google_re2: { }
                                  regex: "\/assets\/.*|\/welcome|\/service-worker.js\/.*|\/favicon.ico"
                              route:
                                cluster: gloo-mesh-ui
                                timeout: 15s
                              typed_per_filter_config:
                                envoy.filters.http.ext_authz:
                                  "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthzPerRoute
                                  disabled: true
                            # All other requests go to the UI
                            - match:
                                prefix: "/"
                              route:
                                cluster: gloo-mesh-ui
                                timeout: 15s
                          cors:
                            allow_origin_string_match:
                              - safe_regex:
                                  google_re2: {}
                                  regex: \*
                            allow_methods: GET, PUT, DELETE, POST, OPTIONS
                            allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web
                            max_age: "1728000"
                            expose_headers: grpc-status,grpc-message
                            filter_enabled: # the values 100/HUNDRED are the default. Still, we want to explicitly define them until we know that the envoy we are using conforms to the new api
                              default_value:
                                numerator: 100
                                denominator: HUNDRED
                    http_filters:
                      - name: envoy.filters.http.ext_authz
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
                          grpc_service:
                            envoy_grpc:
                              cluster_name: ext-authz
                            timeout: 2s
                          include_peer_certificate: true
                          transport_api_version: V3
                      - name: envoy.filters.http.grpc_web
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_web.v3.GrpcWeb
                      - name: envoy.filters.http.cors
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.cors.v3.Cors
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
        - name: gloo-mesh-apiserver
          connect_timeout: 15.000s
          type: STATIC
          http2_protocol_options:
            connection_keepalive:
              interval: 30s
              timeout: 5s
          lb_policy: round_robin
          load_assignment:
            cluster_name: gloo-mesh-apiserver
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 127.0.0.1
                          port_value: 10101
        - name: gloo-mesh-ui
          connect_timeout: 15.000s
          type: static
          lb_policy: round_robin
          load_assignment:
            cluster_name: gloo-mesh-ui
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 127.0.0.1
                          port_value: 20202
        - name: ext-authz
          type: STATIC
          typed_extension_protocol_options:
            envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
              "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
              # Explicitly require HTTP/2
              explicit_http_config:
                http2_protocol_options: { }
          load_assignment:
            cluster_name: ext-authz
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 127.0.0.1
                          port_value: 8083
          # This timeout controls the initial TCP handshake timeout - not the timeout for the
          # entire request.
          connect_timeout: 0.5s
        - name: admin_port_cluster
          connect_timeout: 15.000s
          type: STATIC
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: admin_port_cluster
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: 127.0.0.1
                          port_value: 19000
    admin:
      access_log_path: /dev/null
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 19000
---
# Source: gloo-platform/templates/nginx-default-conf-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-default-conf
  namespace: cnp-nginx
data:
  default.conf: |2-
    # For websocket upgrade control
    map $http_upgrade $connection_upgrade {
      default upgrade;
      '' close;
    }

    server {
      listen [::]:20202;
      listen 20202;
      location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        try_files $uri $uri/ /index.html;
      }
      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
        root   /usr/share/nginx/html;
      }

      location /login {
          alias /usr/share/nginx/html/index.html;
          expires off;
          etag off;
          if_modified_since off;
          add_header Cache-Control 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
          add_header Last-Modified $date_gmt;
          default_type 'text/html';
      }
    }
---
# Source: gloo-platform/templates/redis.yaml
# ConfigMap containing redis-client config yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-client-config
  namespace: cnp-nginx
data:
  config.yaml: |
    redis:
      client: 
        address: gloo-mesh-redis.cnp-nginx:6379
        auth:
          enabled: false
          passwordKey: password
          secretName: redis-auth-secrets
          usernameKey: username
        certs:
          caCertKey: ""
          enabled: false
          secretName: redis-certs
        clustered: false
        connection:
          connMaxIdleTime: 5m0s
          connMaxLifetime: "0"
          contextTimeoutEnabled: false
          dialTimeout: 5s
          idleTimeout: 5m0s
          masterName: ""
          maxConnAge: "0"
          maxIdleConns: 0
          maxRedirects: 3
          maxRetries: 3
          maxRetryBackoff: 512ms
          minIdleConns: 0
          minRetryBackoff: 8ms
          poolFifo: false
          poolSize: 0
          poolTimeout: "0"
          readOnly: false
          readTimeout: 3s
          redisStreamSizeOverride: 0
          routeByLatency: false
          routeRandomly: false
          writeTimeout: 3s
        db: 0
        secretKey: ""
        socketType: tcp
---
# Source: gloo-platform/templates/telemetry-collector-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gloo-telemetry-collector-config
  namespace: cnp-nginx
data:
  relay: |
    receivers:
      jaeger:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          thrift_binary:
            endpoint: 0.0.0.0:6832
          thrift_compact:
            endpoint: 0.0.0.0:6831
          thrift_http:
            endpoint: 0.0.0.0:14268

      opencensus:
        endpoint: 0.0.0.0:55679

      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
            max_recv_msg_size_mib: 12
          http:
            endpoint: 0.0.0.0:4318

      zipkin:
        endpoint: 0.0.0.0:9411

      prometheus:
        config:
          global:
            evaluation_interval: 1m
            scrape_interval: 15s
            scrape_timeout: 15s
          scrape_configs:
          # Scrape the collector itself
          - job_name: otel-collector
            scrape_interval: 15s
            static_configs:
            - labels:
                collector_name: ${env:KUBE_POD_NAME}
                cluster: cluster1
              targets:
                - 0.0.0.0:8888

          # Scrape workload metrics
          - job_name: mesh-workloads
            honor_labels: true
            kubernetes_sd_configs:
            - role: pod
              selectors:
              - role: pod
                field: "spec.nodeName=${env:KUBE_NODE_NAME}"
            relabel_configs:
            - source_labels: [__meta_kubernetes_pod_container_port_name]
              action: keep
              regex: '.*-envoy-prom'
            - action: keep
              regex: true
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape
            - action: replace
              regex: (https?)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scheme
              target_label: __scheme__
            - action: replace
              regex: (.+)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
              target_label: __metrics_path__
            - action: replace
              regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
              replacement: '[$$2]:$$1'
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: replace
              regex: (\d+);((([0-9]+?)(\.|$)){4})
              replacement: $$2:$$1
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
              replacement: __param_$$1
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_namespace
              target_label: namespace
            - action: replace
              source_labels:
              - __meta_kubernetes_pod_name
              target_label: pod_name
            - action: replace
              replacement: cluster1
              target_label: cluster
            - action: drop
              regex: Pending|Succeeded|Failed|Completed
              source_labels:
              - __meta_kubernetes_pod_phase
            metric_relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_service_name
              target_label: service
            - action: replace
              regex: Kubernetes
              replacement: cluster1
              source_labels:
              - source_cluster
              target_label: source_cluster
            - action: replace
              regex: Kubernetes
              replacement: cluster1
              source_labels:
              - destination_cluster
              target_label: destination_cluster
            - source_labels:
              - source_workload
              - source_workload_namespace
              - source_cluster
              target_label: workload_id
              separator: '.'
            - source_labels:
              - destination_workload
              - destination_workload_namespace
              - destination_cluster
              target_label: destination_workload_id
              separator: '.'
            # if both workload id and destination service are unknown
            # set the label to ".." which will be handled by a later rule
            - source_labels:
              - destination_workload_id
              - destination_service
              separator: ";"
              target_label: destination_workload_id
              replacement: ".."
              regex: "unknown.unknown.unknown;unknown"
            # if workload id is unknown but we have a destination
            # service, use it
            - source_labels:
              - destination_workload_id
              - destination_service
              separator: ";"
              target_label: destination_workload_id
              replacement: $$2.<unknown>.<unknown>
              regex: "(unknown.unknown.unknown);(.*)"
            # replace with unknown if missing
            - source_labels:
              - destination_workload_id
              target_label: destination_workload_id
              replacement: "unknown.unknown.unknown"
              regex: ".."
            - source_labels:
              - workload_id
              target_label: workload_id
              replacement: "unknown.unknown.unknown"
              regex: ".."

          # Scrape istiod metrics
          - job_name: istiod-metrics
            honor_labels: true
            kubernetes_sd_configs:
            - role: pod
              selectors:
              - role: pod
                field: "spec.nodeName=${env:KUBE_NODE_NAME}"
                label: "istio"
            relabel_configs:
            - action: keep
              regex: pilot|istiod
              source_labels:
                - __meta_kubernetes_pod_label_istio
            - action: keep
              regex: true
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape
            - action: replace
              regex: (https?)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scheme
              target_label: __scheme__
            - action: replace
              regex: (.+)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
              target_label: __metrics_path__
            - action: replace
              regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
              replacement: '[$$2]:$$1'
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: replace
              regex: (\d+);((([0-9]+?)(\.|$)){4})
              replacement: $$2:$$1
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
              replacement: __param_$$1
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_namespace
              target_label: namespace
            - action: replace
              source_labels:
              - __meta_kubernetes_pod_name
              target_label: pod_name
            - action: replace
              replacement: cluster1
              target_label: cluster
            - action: drop
              regex: Pending|Succeeded|Failed|Completed
              source_labels:
              - __meta_kubernetes_pod_phase

          # Scrape the gloo platform pods
          - job_name: gloo-platform-pods
            honor_labels: true
            kubernetes_sd_configs:
            - role: pod
              namespaces:
                names:
                - cnp-nginx
              selectors:
              - role: pod
                field: "spec.nodeName=${env:KUBE_NODE_NAME}"
            relabel_configs:
            - action: keep
              regex: gloo-mesh-mgmt-server|gloo-mesh-agent|gloo-mesh-analyzer|gloo-mesh-ui
              source_labels:
              - __meta_kubernetes_pod_label_app
            - action: keep
              regex: true
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape
            - action: replace
              regex: (https?)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scheme
              target_label: __scheme__
            - action: replace
              regex: (.+)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
              target_label: __metrics_path__
            - source_labels: [__meta_kubernetes_pod_container_port_name]
              action: keep
              regex: stats
            - action: replace
              regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
              replacement: '[$$2]:$$1'
              source_labels:
              - __meta_kubernetes_pod_container_port_number
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: replace
              regex: (\d+);((([0-9]+?)(\.|$)){4})
              replacement: $$2:$$1
              source_labels:
              - __meta_kubernetes_pod_container_port_number
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
              replacement: __param_$$1
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_namespace
              target_label: namespace
            - action: drop
              regex: Pending|Succeeded|Failed|Completed
              source_labels:
              - __meta_kubernetes_pod_phase
            - action: replace
              replacement: cluster1
              target_label: cluster
            - action: replace
              target_label: pod
              source_labels: [__meta_kubernetes_pod_name]

          # Scrape the ambient ztunnels
          - job_name: ambient-ztunnels
            honor_labels: true
            kubernetes_sd_configs:
            - role: pod
              selectors:
              - role: pod
                field: "spec.nodeName=${env:KUBE_NODE_NAME}"
            relabel_configs:
            - action: keep
              regex: ztunnel
              source_labels:
              - __meta_kubernetes_pod_label_app
            - action: replace
              regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
              replacement: '[$$2]:$$1'
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: replace
              regex: (\d+);((([0-9]+?)(\.|$)){4})
              replacement: $$2:$$1
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: replace
              replacement: "http"
              target_label: __schema__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_namespace
              target_label: namespace
            - action: replace
              replacement: cluster1
              target_label: cluster
            - action: drop
              regex: Pending|Succeeded|Failed|Completed
              source_labels:
              - __meta_kubernetes_pod_phase
            metric_relabel_configs:
            - target_label: ambient
              replacement: "ztunnel"
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_service_name
              target_label: service
            - action: replace
              regex: Kubernetes
              replacement: cluster1
              source_labels:
              - source_cluster
              target_label: source_cluster
            - action: replace
              regex: Kubernetes
              replacement: cluster1
              source_labels:
              - destination_cluster
              target_label: destination_cluster
            - source_labels:
              - source_workload
              - source_workload_namespace
              - source_cluster
              target_label: workload_id
              separator: '.'
            - source_labels:
              - destination_workload
              - destination_workload_namespace
              - destination_cluster
              target_label: destination_workload_id
              separator: '.'
            # replace with unknown if missing
            - source_labels:
              - destination_workload_id
              target_label: destination_workload_id
              replacement: "unknown.unknown.unknown"
              regex: ".."
            - source_labels:
              - workload_id
              target_label: workload_id
              replacement: "unknown.unknown.unknown"
              regex: ".."

          # Scrape the ambient waypoints
          - job_name: ambient-waypoints
            honor_labels: true
            kubernetes_sd_configs:
            - role: pod
              selectors:
              - role: pod
                field: "spec.nodeName=${env:KUBE_NODE_NAME}"
            relabel_configs:
            - action: keep
              regex: ".+"
              source_labels:
              - __meta_kubernetes_pod_annotation_istio_io_for_service_account
            - action: replace
              regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
              replacement: '[$$2]:$$1'
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: replace
              regex: (\d+);((([0-9]+?)(\.|$)){4})
              replacement: $$2:$$1
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              - __meta_kubernetes_pod_ip
              target_label: __address__
            - action: replace
              replacement: "http"
              target_label: __schema__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_namespace
              target_label: namespace
            - action: drop
              regex: Pending|Succeeded|Failed|Completed
              source_labels:
              - __meta_kubernetes_pod_phase
            - action: replace
              replacement: cluster1
              target_label: cluster
            metric_relabel_configs:
            - target_label: ambient
              replacement: "waypoint"
            - action: labelmap
              regex: __meta_kubernetes_service_label_(.+)
            - action: replace
              source_labels:
              - __meta_kubernetes_service_name
              target_label: service
            - action: replace
              regex: Kubernetes
              replacement: cluster1
              source_labels:
              - source_cluster
              target_label: source_cluster
            - action: replace
              regex: Kubernetes
              replacement: cluster1
              source_labels:
              - destination_cluster
              target_label: destination_cluster
            - source_labels:
              - source_workload
              - source_workload_namespace
              - source_cluster
              target_label: workload_id
              separator: '.'
            - source_labels:
              - destination_workload
              - destination_workload_namespace
              - destination_cluster
              target_label: destination_workload_id
              separator: '.'
            # replace with unknown if missing
            - source_labels:
              - destination_workload_id
              target_label: destination_workload_id
              replacement: "unknown.unknown.unknown"
              regex: ".."
            - source_labels:
              - workload_id
              target_label: workload_id
              replacement: "unknown.unknown.unknown"
              regex: ".."
      # Custom receivers
      filelog/access_logs:
        include:
        - /var/log/pods/*/istio-proxy/*.log
        include_file_name: false
        include_file_path: true
        operators:
        - expr: body matches "^[^{}]*$"
          type: filter
        - id: get-format
          routes:
          - expr: body matches "^\\{"
            output: parser-docker
          - expr: body matches "^[^ Z]+ "
            output: parser-crio
          - expr: body matches "^[^ Z]+Z"
            output: parser-containerd
          type: router
        - id: parser-crio
          output: extract_metadata_from_filepath
          regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          type: regex_parser
        - id: parser-containerd
          output: extract_metadata_from_filepath
          regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
          type: regex_parser
        - id: parser-docker
          output: extract_metadata_from_filepath
          type: json_parser
        - cache:
            size: 128
          id: extract_metadata_from_filepath
          output: log_parser
          parse_from: attributes["log.file.path"]
          regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
          type: regex_parser
        - id: log_parser
          parse_from: attributes.log
          timestamp:
            layout: '%Y-%m-%dT%H:%M:%S.%LZ'
            parse_from: attributes.timestamp
          type: json_parser
        - expr: (attributes?.api_id ?? "") == ""
          type: filter
        - from: attributes.stream
          to: attributes["log.iostream"]
          type: move
        - from: attributes.container_name
          to: resource["k8s.container.name"]
          type: move
        - from: attributes.namespace
          to: resource["k8s.namespace.name"]
          type: move
        - from: attributes.pod_name
          to: resource["k8s.pod.name"]
          type: move
        - from: attributes.restart_count
          to: resource["k8s.container.restart_count"]
          type: move
        - from: attributes.uid
          to: resource["k8s.pod.uid"]
          type: move
        - field: body
          type: remove
        - field: attributes.log
          type: remove
      filelog/gloo_components:
        include:
        - /var/log/pods/*_gloo-*/*/*.log
        include_file_name: false
        include_file_path: true
        operators:
        - cache:
            size: 128
          id: extract_metadata_from_filepath
          parse_from: attributes["log.file.path"]
          regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
          type: regex_parser
        - from: attributes.namespace
          to: resource["k8s.namespace.name"]
          type: move
        - from: attributes.pod_name
          to: resource["k8s.pod.name"]
          type: move
        - from: attributes.container_name
          to: resource["k8s.container.name"]
          type: move
        - field: resource["component"]
          if: resource["k8s.pod.name"] contains "gloo-mesh-agent"
          type: add
          value: gloo-mesh-agent
        - field: resource["component"]
          if: resource["k8s.pod.name"] contains "gloo-mesh-mgmt-server"
          type: add
          value: gloo-mesh-mgmt-server
        - field: resource["component"]
          if: resource["k8s.pod.name"] contains "gloo-mesh-ui"
          type: add
          value: gloo-mesh-ui
        - field: resource["component"]
          if: resource["k8s.pod.name"] contains "gloo-mesh-redis"
          type: add
          value: gloo-mesh-redis
        - field: resource["component"]
          if: resource["k8s.pod.name"] contains "gloo-redis-snapshot"
          type: add
          value: gloo-redis-snapshot
        - field: resource["component"]
          if: resource["k8s.pod.name"] contains "gloo-redis-insights"
          type: add
          value: gloo-redis-insights
        - field: resource["component"]
          if: resource["k8s.pod.name"] contains "gloo-telemetry-collector-agent"
          type: add
          value: gloo-telemetry-collector-agent
        - field: resource["component"]
          if: resource["k8s.pod.name"] contains "gloo-telemetry-gateway"
          type: add
          value: gloo-telemetry-gateway
        - field: resource["component"]
          if: resource["k8s.pod.name"] contains "gloo-mesh-analyzer"
          type: add
          value: gloo-mesh-analyzer
      filelog/istiod:
        include:
        - /var/log/pods/*_istiod-*/*/*.log
        include_file_name: false
        include_file_path: true
        operators:
        - cache:
            size: 128
          id: extract_metadata_from_filepath
          parse_from: attributes["log.file.path"]
          regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
          type: regex_parser
        - from: attributes.namespace
          to: resource["k8s.namespace.name"]
          type: move
        - from: attributes.pod_name
          to: resource["k8s.pod.name"]
          type: move
        - from: attributes.container_name
          to: resource["k8s.container.name"]
          type: move
        - cache:
            size: 128
          id: extract_component_from_pod_name
          parse_from: resource["k8s.pod.name"]
          regex: ^(?P<component_name>.*)-[0-9a-zA-Z]{1,10}-[0-9a-zA-Z]*$
          type: regex_parser
        - from: attributes.component_name
          to: resource["component"]
          type: move

    processors:
      resource/cluster_context:
        attributes:
          - key: "cluster_name"
            action: insert
            value: cluster1

      resource/ui_source_context:
        attributes:
          - key: "source"
            action: insert
            value: "ui-log-stream"

      resource/portal_source_context:
        attributes:
          - key: "source"
            action: insert
            value: "portal"

      gloo_metrics_processor:
        clusterName: cluster1
        enableClusterNodeProcessor: false

      filter/min:
        metrics:
          include:
            match_type: strict
            metric_names:
              # istio gateway, sidecar, ztunnel, waypoint, and gloo gateway metrics
              - istio_requests_total
              - istio_request_duration_milliseconds
              - istio_tcp_sent_bytes_total
              - istio_tcp_received_bytes_total
              - istio_tcp_connections_opened_total
              - gloo_gateway_upstream_rq
              - gloo_gateway_upstream_rq_time
              - gloo_gateway_upstream_cx_rx_bytes_total
              - gloo_gateway_upstream_cx_tx_bytes_total
              # istiod metrics
              - pilot_proxy_convergence_time
              # required for meshctl
              - relay_pull_clients_connected
              - relay_push_clients_connected
              - relay_push_clients_warmed
              # Keep otel-collector metrics that show how it's working
              - otelcol_processor_refused_metric_points
              - otelcol_receiver_refused_metric_points
              - otelcol_processor_refused_spans
              - otelcol_exporter_queue_capacity
              - otelcol_exporter_queue_size
              - otelcol_loadbalancer_backend_latency
              - otelcol_exporter_send_failed_spans
              # OTel in version 0.87.0+ has a bug where it will drop metrics if the suffix is added, in this case `_total`
              # the alternative with the suffix are kept in place if this breaking change/bug is fixed in the future
              - istio_requests
              - istio_tcp_sent_bytes
              - istio_tcp_received_bytes
              - istio_tcp_connections_opened
              - gloo_mesh_agent_warmed_up
              - gloo_mesh_reconciler_time_sec
              - gloo_mesh_garbage_collection_time_sec
              - gloo_mesh_redis_relation_err
              - gloo_mesh_redis_sync_err
              - gloo_mesh_redis_write_time_sec
              - gloo_mesh_snapshot_upserter_op_time_sec
              - gloo_mesh_translation_time_sec
              - gloo_mesh_translator_concurrency
              - translation_error
              - translation_warning
              - gloo_mesh_relay_client_delta_pull_time_sec
              - gloo_mesh_relay_client_delta_pull_err
              - gloo_mesh_relay_client_delta_push_time_sec
              - gloo_mesh_relay_client_delta_push_err
              - gloo_mesh_build_snapshot_metric_time_sec
              - gloo_mesh_redis_write_time_sec
              - gloo_mesh_redis_sync_err
              - gloo_mesh_safe_mode_active
              - gloo_mesh_insights_store_upsert_time_sec
              - gloo_mesh_insights_store_list_time_sec
              - gloo_mesh_insights_store_delete_time_sec
              - solo_io_gloo_mesh_gateway_license
              - gloo_mesh_insights
              - gloo_mesh_insights_resources_scanned
              - gloo_mesh_insight_engine_errors_total
              - gloo_mesh_insights_total_execution_time
              - gloo_mesh_insights_execution_time
              - gloo_mesh_analyzer_total_execution_time
              - gloo_mesh_analyzer_execution_time
              - gloo_mesh_analyzer_logs_total
              - object_write_fails_total
              - gloo_mesh_relay_client_last_delta_pull_received_timestamp_seconds
              - gloo_mesh_relay_client_last_server_communication_pull_stream_timestamp_seconds
              - gloo_mesh_relay_client_last_delta_push_timestamp_seconds
              - gloo_mesh_relay_client_delta_push_last_loop_timestamp_seconds

      # Metric label allow lists to reduce cardinality in our internal metric pipelines
      transform/keep_istio_labels:
        metric_statements:
          - context: datapoint
            statements:
              - keep_keys(attributes, ["cluster","collector_pod","connection_security_policy","destination_cluster","destination_principal","destination_service","destination_workload","destination_workload_id","destination_workload_namespace","gloo_mesh","namespace","pod_name","reporter","response_code","response_flags","source_cluster","source_principal","source_workload","source_workload_namespace","version","workload_id"]) where IsMatch(metric.name, "^istio.*")
      transform/keep_otelcol_labels:
        metric_statements:
          - context: datapoint
            statements:
              - keep_keys(attributes, ["app","cluster","collector_name","collector_pod","component","exporter","namespace","pod_template_generation","processor","service_version"]) where IsMatch(metric.name, "^otelcol.*")
      transform/keep_ebpf_solo_io_labels:
        metric_statements:
          - context: datapoint
            statements:
              - keep_keys(attributes, ["app","client_addr","cluster","code","collector_pod","component","destination","local_addr","namespace","pod","pod_template_generation","remote_identity","server_identity","source"]) where IsMatch(metric.name, "^ebpf_solo_io.*")
      # Custom processors
      batch:
        send_batch_max_size: 3000
        send_batch_size: 2000
        timeout: 600ms
      batch/logs:
        send_batch_size: 100
        timeout: 5s
      memory_limiter:
        check_interval: 1s
        limit_percentage: 85
        spike_limit_percentage: 10

      # Create gloo_gateway_ metrics out of envoy_cluster_ metrics when envoy_cluster_name is meaningful for our Graph
      # Update experimental_match_labels to match all desired kind once they are supported by Gloo Gateway
      metricstransform/gg_gloo_gateway_metrics:
        transforms:
          - include: "(envoy_cluster_upstream_rq$)"
            action: insert
            new_name: gloo_gateway_upstream_rq
            match_type: regexp
            experimental_match_labels: {"envoy_cluster_name": "^kube-svc.*"}
          - include: "(envoy_cluster_upstream_rq_time$)"
            action: insert
            new_name: gloo_gateway_upstream_rq_time
            match_type: regexp
            experimental_match_labels: {"envoy_cluster_name": "^kube-svc.*"}
          - include: envoy_cluster_upstream_cx_rx_bytes_total
            action: insert
            new_name: gloo_gateway_upstream_cx_rx_bytes_total
            match_type: regexp
            experimental_match_labels: {"envoy_cluster_name": "^kube-svc.*"}
          - include: envoy_cluster_upstream_cx_tx_bytes_total
            action: insert
            new_name: gloo_gateway_upstream_cx_tx_bytes_total
            match_type: regexp
            experimental_match_labels: {"envoy_cluster_name": "^kube-svc.*"}
      transform/gg_envoy_cluster_names_to_workload_names:
        error_mode: ignore
        metric_statements:
        - context: datapoint
          statements:
          - set(cache["temp"], Split(attributes["envoy_cluster_name"], "_")) where attributes["envoy_cluster_name"] != nil and IsMatch(metric.name, "^gloo_gateway_.*")
          # We are splitting the value of the original envoy_cluster_name into slices delimited by underscores.
          # Format: kind_upstreamName_upstreamNs_svcNs_svcName_svcPort
          - set(attributes["destination_workload_namespace"], cache["temp"][3]) where IsMatch(metric.name, "^gloo_gateway_.*")
          - set(attributes["destination_workload"], cache["temp"][4]) where IsMatch(metric.name, "^gloo_gateway_.*")
      transform/gg_set_static_attributes:
        metric_statements:
          - context: datapoint
            statements:
              - set(attributes["response_code"], attributes["envoy_response_code"]) where IsMatch(metric.name, "^gloo_gateway_upstream_rq")
              - set(attributes["source_workload"], attributes["app_kubernetes_io_name"]) where IsMatch(metric.name, "^gloo_gateway_.*")
              - set(attributes["source_workload_namespace"], attributes["kube_namespace"]) where IsMatch(metric.name, "^gloo_gateway_.*")
              - set(attributes["source_cluster"], "cluster1") where IsMatch(metric.name, "^gloo_gateway_.*")
              - set(attributes["destination_cluster"], "cluster1") where IsMatch(metric.name, "^gloo_gateway_.*")
      transform/gg_create_workload_ids:
        metric_statements:
        - context: datapoint
          statements:
            - set(attributes["workload_id"], Concat([attributes["source_workload"], attributes["source_workload_namespace"], attributes["source_cluster"]], ".")) where IsMatch(metric.name, "^gloo_gateway_.*")
            - set(attributes["destination_workload_id"], Concat([attributes["destination_workload"], attributes["destination_workload_namespace"], attributes["destination_cluster"]], ".")) where IsMatch(metric.name, "^gloo_gateway_.*")
      transform/keep_gloo_gateway_labels:
        metric_statements:
          - context: datapoint
            statements:
              - keep_keys(attributes, ["cluster","collector_pod","destination_cluster","destination_workload","destination_workload_id","destination_workload_namespace","namespace","pod_name","source_cluster","source_workload","source_workload_namespace","workload_id", "response_code"]) where IsMatch(metric.name, "^gloo_gateway.*")
    exporters:
      otlp/jaeger:
        endpoint: gloo-jaeger-collector.cnp-nginx.svc:4317
        tls:
          insecure: true
      # Custom exporters
      clickhouse:
        database: default
        endpoint: tcp://clickhouse.gloo-mesh.svc:9000?dial_timeout=10s&compress=lz4
        logs_table_name: gloo_api_logs
        password: default
        retry_on_failure:
          enabled: true
          initial_interval: 1s
          max_elapsed_time: 5m
          max_interval: 30s
        timeout: 5s
        ttl: 72h
        username: default
      prometheus:
        add_metric_suffixes: false
        endpoint: 0.0.0.0:9091
      redisstream/basic:
        endpoint: gloo-mesh-redis.cnp-nginx:6379
        expire: 30m
        max_entries: 1
        stream_attributes:
          resource_attributes:
          - cluster_name
          - source
      redisstream/ui:
        endpoint: gloo-mesh-redis.cnp-nginx:6379
        expire: 30m
        stream: ui
        stream_attributes:
          resource_attributes:
          - cluster_name
          - source
          - component
          - k8s.pod.name
          - k8s.container.name

    extensions:
      health_check:
        endpoint: 0.0.0.0:13133

    service:
      telemetry:
        logs:
          encoding: json
        metrics:
          address: 0.0.0.0:8888
      extensions:
        - health_check
      pipelines:
              
        metrics/ui:
          processors:
          - memory_limiter
          - transform/keep_istio_labels
          - transform/keep_otelcol_labels
          - metricstransform/gg_gloo_gateway_metrics
          - filter/min
          - transform/gg_envoy_cluster_names_to_workload_names
          - transform/gg_set_static_attributes
          - transform/gg_create_workload_ids
          - transform/keep_gloo_gateway_labels
          - gloo_metrics_processor
          - batch
          receivers:
          - prometheus
          exporters:
          - prometheus
        traces/istio:
          processors:
          - batch
          receivers:
          - jaeger
          - opencensus
          - otlp
          - zipkin
          exporters:
          - otlp/jaeger
---
# Source: gloo-platform/templates/telemetry-gateway-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gloo-telemetry-gateway-config
  namespace: cnp-nginx
data:
  relay: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
            max_recv_msg_size_mib: 12
            tls:
              cert_file: /etc/otel-certs/tls.crt
              key_file: /etc/otel-certs/tls.key
      prometheus:
        config:
          scrape_configs:
          # Scrape the collector itself
          - job_name: opentelemetry-collector
            scrape_interval: 15s
            static_configs:
            - targets:
              - ${env:MY_POD_IP}:8888

    processors:
      filter/include_basic_source:
        logs:
          include:
            match_type: regexp
            resource_attributes:
              - key: source
                value: gloo-mesh-analyzer

      filter/include_ui_source:
        logs:
          include:
            match_type: strict
            resource_attributes:
              - key: source
                value: ui-log-stream

      filter/include_portal_source:
        logs:
          include:
            match_type: strict
            resource_attributes:
              - key: source
                value: portal
      # Custom processors
      batch:
        send_batch_max_size: 3000
        send_batch_size: 2000
        timeout: 600ms
      batch/logs:
        send_batch_size: 100
        timeout: 5s
      memory_limiter:
        check_interval: 1s
        limit_percentage: 85
        spike_limit_percentage: 10

    exporters:
      otlp/jaeger:
        endpoint: gloo-jaeger-collector.cnp-nginx.svc:4317
        tls:
          insecure: true
      # Custom exporters
      clickhouse:
        database: default
        endpoint: tcp://clickhouse.gloo-mesh.svc:9000?dial_timeout=10s&compress=lz4
        logs_table_name: gloo_api_logs
        password: default
        retry_on_failure:
          enabled: true
          initial_interval: 1s
          max_elapsed_time: 5m
          max_interval: 30s
        timeout: 5s
        ttl: 72h
        username: default
      prometheus:
        add_metric_suffixes: false
        endpoint: 0.0.0.0:9091
      redisstream/basic:
        endpoint: gloo-mesh-redis.cnp-nginx:6379
        expire: 30m
        max_entries: 1
        stream_attributes:
          resource_attributes:
          - cluster_name
          - source
      redisstream/ui:
        endpoint: gloo-mesh-redis.cnp-nginx:6379
        expire: 30m
        stream: ui
        stream_attributes:
          resource_attributes:
          - cluster_name
          - source
          - component
          - k8s.pod.name
          - k8s.container.name

    extensions:
      health_check:
        endpoint: 0.0.0.0:13133

    service:
      telemetry:
        logs:
          encoding: json
        metrics:
          address: 0.0.0.0:8888
      extensions:
      - health_check
      pipelines:
        logs/redis_stream_basic:
          exporters:
          - redisstream/basic
          processors:
          - filter/include_basic_source
          - batch/logs
          receivers:
          - otlp
        logs/redis_stream_ui:
          exporters:
          - redisstream/ui
          processors:
          - filter/include_ui_source
          - batch/logs
          receivers:
          - otlp
        metrics/prometheus:
          exporters:
          - prometheus
          processors:
          - memory_limiter
          - batch
          receivers:
          - otlp
        traces/jaeger:
          exporters:
          - otlp/jaeger
          processors:
          - batch
          receivers:
          - otlp
---
# Source: gloo-platform/charts/prometheus/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: gloo-platform
    app.kubernetes.io/version: v2.53.0
    helm.sh/chart: prometheus-25.23.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: prometheus-server
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - services
      - endpoints
      - pods
      - ingresses
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "discovery.k8s.io"
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get
---
# Source: gloo-platform/charts/telemetryCollector/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gloo-telemetry-collector
  labels:
    helm.sh/chart: telemetryCollector-0.93.3
    app.kubernetes.io/name: telemetryCollector
    app.kubernetes.io/instance: gloo-platform
    app.kubernetes.io/version: "0.102.1"
    app.kubernetes.io/managed-by: Helm
    app: gloo-telemetry-collector-agent
rules:
  - apiGroups:
    - ""
    resources:
    - nodes
    - nodes/proxy
    - nodes/metrics
    - services
    - endpoints
    - pods
    - ingresses
    - configmaps
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - extensions
    - networking.k8s.io
    resources:
    - ingresses/status
    - ingresses
    verbs:
    - get
    - list
    - watch
  - nonResourceURLs:
    - /metrics
    verbs:
    - get
---
# Source: gloo-platform/charts/telemetryGateway/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gloo-telemetry-gateway
  labels:
    helm.sh/chart: telemetryGateway-0.93.3
    app.kubernetes.io/name: telemetryGateway
    app.kubernetes.io/instance: gloo-platform
    app.kubernetes.io/version: "0.102.1"
    app.kubernetes.io/managed-by: Helm
    app: gloo-telemetry-gateway
rules:
  - apiGroups:
    - ""
    resources:
    - nodes
    - nodes/proxy
    - nodes/metrics
    - services
    - endpoints
    - pods
    - ingresses
    - configmaps
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - extensions
    - networking.k8s.io
    resources:
    - ingresses/status
    - ingresses
    verbs:
    - get
    - list
    - watch
  - nonResourceURLs:
    - /metrics
    verbs:
    - get
---
# Source: gloo-platform/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-mesh-mgmt-server-cnp-nginx
  labels:
    app: gloo-mesh-mgmt-server
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - namespaces
  - pods
  - serviceaccounts
  - services
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - namespaces/status
  - nodes/status
  - serviceaccounts/status
  - services/status
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - admin.gloo.solo.io
  resources:
  - dashboards
  - extauthservers
  - gatewaylifecyclemanagers
  - insightsconfigs
  - istiolifecyclemanagers
  - kubernetesclusters
  - ratelimitserverconfigs
  - ratelimitserversettings
  - roottrustpolicies
  - waypointlifecyclemanagers
  - workspaces
  - workspacesettings
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - admin.gloo.solo.io
  resources:
  - dashboards/status
  - extauthservers/status
  - gatewaylifecyclemanagers/status
  - insightsconfigs/status
  - istiolifecyclemanagers/status
  - kubernetesclusters/status
  - ratelimitserverconfigs/status
  - ratelimitserversettings/status
  - roottrustpolicies/status
  - waypointlifecyclemanagers/status
  - workspaces/status
  - workspacesettings/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - '*'
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations/status
  - validatingwebhookconfigurations/status
  verbs:
  - get
  - update
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions/status
  verbs:
  - get
  - update
- apiGroups:
  - apimanagement.gloo.solo.io
  resources:
  - apidocs
  verbs:
  - '*'
- apiGroups:
  - apimanagement.gloo.solo.io
  resources:
  - apidocs/status
  - apiproducts/status
  - apischemadiscoveries/status
  - graphqlresolvermaps/status
  - graphqlschemas/status
  - graphqlstitchedschemas/status
  - portalgroups/status
  - portals/status
  verbs:
  - get
  - update
- apiGroups:
  - apimanagement.gloo.solo.io
  resources:
  - apiproducts
  - apischemadiscoveries
  - graphqlresolvermaps
  - graphqlschemas
  - graphqlstitchedschemas
  - portalgroups
  - portals
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - daemonsets
  - statefulsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - daemonsets/status
  - deployments/status
  - statefulsets/status
  verbs:
  - get
  - update
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - '*'
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  verbs:
  - '*'
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - '*'
- apiGroups:
  - enterprise.gloo.solo.io
  resources:
  - authconfigs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - enterprise.gloo.solo.io
  resources:
  - authconfigs/status
  verbs:
  - get
  - update
- apiGroups:
  - extauth.solo.io
  resources:
  - authconfigs
  verbs:
  - '*'
- apiGroups:
  - extauth.solo.io
  resources:
  - authconfigs/status
  verbs:
  - get
  - update
- apiGroups:
  - extensions.policy.gloo.solo.io
  resources:
  - wasmdeploymentpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions.policy.gloo.solo.io
  resources:
  - wasmdeploymentpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - gateway.gloo.solo.io
  resources:
  - gatewayparameters
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.gloo.solo.io
  resources:
  - gatewayparameters/status
  verbs:
  - get
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses
  - httproutes
  - tcproutes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses/status
  - gateways/status
  - httproutes/status
  - tcproutes/status
  verbs:
  - get
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gateways
  verbs:
  - '*'
- apiGroups:
  - gateway.solo.io
  resources:
  - gateways
  - httplisteneroptions
  - listeneroptions
  - routeoptions
  - routetables
  - virtualhostoptions
  - virtualservices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.solo.io
  resources:
  - gateways/status
  - httplisteneroptions/status
  - listeneroptions/status
  - routeoptions/status
  - routetables/status
  - virtualhostoptions/status
  - virtualservices/status
  verbs:
  - get
  - update
- apiGroups:
  - gloo.solo.io
  resources:
  - proxies
  - settings
  - upstreamgroups
  - upstreams
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gloo.solo.io
  resources:
  - proxies/status
  - settings/status
  - upstreamgroups/status
  - upstreams/status
  verbs:
  - get
  - update
- apiGroups:
  - infrastructure.gloo.solo.io
  resources:
  - cloudproviders
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - infrastructure.gloo.solo.io
  resources:
  - cloudproviders/status
  - cloudresources/status
  verbs:
  - get
  - update
- apiGroups:
  - infrastructure.gloo.solo.io
  resources:
  - cloudresources
  verbs:
  - '*'
- apiGroups:
  - install.istio.io
  resources:
  - istiooperators
  verbs:
  - '*'
- apiGroups:
  - install.istio.io
  resources:
  - istiooperators/status
  verbs:
  - get
  - update
- apiGroups:
  - internal.gloo.solo.io
  resources:
  - certificaterequests
  - discoveredcnis
  - discoveredgateways
  - meshes
  - virtualservicebackups
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - internal.gloo.solo.io
  resources:
  - certificaterequests/status
  - discoveredcnis/status
  - discoveredgateways/status
  - issuedcertificates/status
  - meshes/status
  - portalconfigs/status
  - spireregistrationentries/status
  - virtualservicebackups/status
  verbs:
  - get
  - update
- apiGroups:
  - internal.gloo.solo.io
  resources:
  - issuedcertificates
  - portalconfigs
  - spireregistrationentries
  - xdsconfigs
  verbs:
  - '*'
- apiGroups:
  - networking.gloo.solo.io
  resources:
  - externalendpoints
  - externalservices
  - externalworkloads
  - progressivedeliveries
  - routetables
  - virtualdestinations
  - virtualgateways
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.gloo.solo.io
  resources:
  - externalendpoints/status
  - externalservices/status
  - externalworkloads/status
  - progressivedeliveries/status
  - routetables/status
  - virtualdestinations/status
  - virtualgateways/status
  verbs:
  - get
  - update
- apiGroups:
  - networking.istio.io
  resources:
  - destinationrules
  - envoyfilters
  - gateways
  - serviceentries
  - sidecars
  - virtualservices
  - workloadentries
  - workloadgroups
  verbs:
  - '*'
- apiGroups:
  - networking.istio.io
  resources:
  - destinationrules/status
  - envoyfilters/status
  - gateways/status
  - serviceentries/status
  - sidecars/status
  - virtualservices/status
  - workloadentries/status
  - workloadgroups/status
  verbs:
  - get
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - '*'
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - observability.policy.gloo.solo.io
  resources:
  - accesslogpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - observability.policy.gloo.solo.io
  resources:
  - accesslogpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - operator.gloo.solo.io
  resources:
  - servicemeshcontrollers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - operator.gloo.solo.io
  resources:
  - servicemeshcontrollers/status
  verbs:
  - get
  - update
- apiGroups:
  - ratelimit.solo.io
  resources:
  - ratelimitconfigs
  verbs:
  - '*'
- apiGroups:
  - ratelimit.solo.io
  resources:
  - ratelimitconfigs/status
  verbs:
  - get
  - update
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings
  - clusterroles
  verbs:
  - '*'
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings/status
  - clusterroles/status
  - rolebindings/status
  - roles/status
  verbs:
  - get
  - update
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  - roles
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - resilience.policy.gloo.solo.io
  resources:
  - activehealthcheckpolicies
  - adaptiverequestconcurrencypolicies
  - connectionpolicies
  - failoverpolicies
  - faultinjectionpolicies
  - graphqlpersistedquerycachepolicies
  - listenerconnectionpolicies
  - outlierdetectionpolicies
  - retrytimeoutpolicies
  - trimproxyconfigpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - resilience.policy.gloo.solo.io
  resources:
  - activehealthcheckpolicies/status
  - adaptiverequestconcurrencypolicies/status
  - connectionpolicies/status
  - failoverpolicies/status
  - faultinjectionpolicies/status
  - graphqlpersistedquerycachepolicies/status
  - listenerconnectionpolicies/status
  - outlierdetectionpolicies/status
  - retrytimeoutpolicies/status
  - trimproxyconfigpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - security.istio.io
  resources:
  - authorizationpolicies
  - peerauthentications
  verbs:
  - '*'
- apiGroups:
  - security.istio.io
  resources:
  - authorizationpolicies/status
  - peerauthentications/status
  verbs:
  - get
  - update
- apiGroups:
  - security.policy.gloo.solo.io
  resources:
  - accesspolicies
  - clienttlspolicies
  - corspolicies
  - csrfpolicies
  - dlppolicies
  - extauthpolicies
  - graphqlallowedquerypolicies
  - jwtpolicies
  - wafpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - security.policy.gloo.solo.io
  resources:
  - accesspolicies/status
  - clienttlspolicies/status
  - corspolicies/status
  - csrfpolicies/status
  - dlppolicies/status
  - extauthpolicies/status
  - graphqlallowedquerypolicies/status
  - jwtpolicies/status
  - wafpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - telemetry.istio.io
  resources:
  - telemetries
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - telemetry.istio.io
  resources:
  - telemetries/status
  verbs:
  - get
  - update
- apiGroups:
  - trafficcontrol.policy.gloo.solo.io
  resources:
  - headermanipulationpolicies
  - httpbufferpolicies
  - loadbalancerpolicies
  - mirrorpolicies
  - proxyprotocolpolicies
  - ratelimitclientconfigs
  - ratelimitpolicies
  - transformationpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - trafficcontrol.policy.gloo.solo.io
  resources:
  - headermanipulationpolicies/status
  - httpbufferpolicies/status
  - loadbalancerpolicies/status
  - mirrorpolicies/status
  - proxyprotocolpolicies/status
  - ratelimitclientconfigs/status
  - ratelimitpolicies/status
  - transformationpolicies/status
  verbs:
  - get
  - update

- apiGroups:
  - ""
  resources:
  - configmaps
  - namespaces
  - pods
  - resourcequotas
  - secrets
  - serviceaccounts
  - services
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - configmaps/status
  - namespaces/status
  - nodes/status
  - pods/status
  - serviceaccounts/status
  - services/status
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - admin.gloo.solo.io
  resources:
  - dashboards
  - extauthservers
  - gatewaylifecyclemanagers
  - insightsconfigs
  - istiolifecyclemanagers
  - kubernetesclusters
  - ratelimitserverconfigs
  - ratelimitserversettings
  - roottrustpolicies
  - waypointlifecyclemanagers
  - workspaces
  - workspacesettings
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - admin.gloo.solo.io
  resources:
  - dashboards/status
  - extauthservers/status
  - gatewaylifecyclemanagers/status
  - insightsconfigs/status
  - istiolifecyclemanagers/status
  - kubernetesclusters/status
  - ratelimitserverconfigs/status
  - ratelimitserversettings/status
  - roottrustpolicies/status
  - waypointlifecyclemanagers/status
  - workspaces/status
  - workspacesettings/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - '*'
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations/status
  - validatingwebhookconfigurations/status
  verbs:
  - get
  - update
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions/status
  verbs:
  - get
  - update
- apiGroups:
  - apimanagement.gloo.solo.io
  resources:
  - apidocs
  verbs:
  - '*'
- apiGroups:
  - apimanagement.gloo.solo.io
  resources:
  - apidocs/status
  - apiproducts/status
  - apischemadiscoveries/status
  - graphqlresolvermaps/status
  - graphqlschemas/status
  - graphqlstitchedschemas/status
  - portalgroups/status
  - portals/status
  verbs:
  - get
  - update
- apiGroups:
  - apimanagement.gloo.solo.io
  resources:
  - apiproducts
  - apischemadiscoveries
  - graphqlresolvermaps
  - graphqlschemas
  - graphqlstitchedschemas
  - portalgroups
  - portals
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - daemonsets/status
  - deployments/status
  - replicasets/status
  - statefulsets/status
  verbs:
  - get
  - update
- apiGroups:
  - apps
  resources:
  - replicasets
  - statefulsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - '*'
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  verbs:
  - '*'
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - '*'
- apiGroups:
  - enterprise.gloo.solo.io
  resources:
  - authconfigs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - enterprise.gloo.solo.io
  resources:
  - authconfigs/status
  verbs:
  - get
  - update
- apiGroups:
  - extauth.solo.io
  resources:
  - authconfigs
  verbs:
  - '*'
- apiGroups:
  - extauth.solo.io
  resources:
  - authconfigs/status
  verbs:
  - get
  - update
- apiGroups:
  - extensions.policy.gloo.solo.io
  resources:
  - wasmdeploymentpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions.policy.gloo.solo.io
  resources:
  - wasmdeploymentpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - gateway.gloo.solo.io
  resources:
  - gatewayparameters
  verbs:
  - '*'
- apiGroups:
  - gateway.gloo.solo.io
  resources:
  - gatewayparameters/status
  verbs:
  - get
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses
  - gateways
  - httproutes
  - referencegrants
  verbs:
  - '*'
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses/status
  - gateways/status
  - httproutes/status
  - tcproutes/status
  verbs:
  - get
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - tcproutes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.solo.io
  resources:
  - gateways
  - httpgateways
  - httplisteneroptions
  - listeneroptions
  - routeoptions
  - routetables
  - tcpgateways
  - virtualhostoptions
  - virtualservices
  verbs:
  - '*'
- apiGroups:
  - gateway.solo.io
  resources:
  - gateways/status
  - httplisteneroptions/status
  - listeneroptions/status
  - routeoptions/status
  - routetables/status
  - virtualhostoptions/status
  - virtualservices/status
  verbs:
  - get
  - update
- apiGroups:
  - gloo.solo.io
  resources:
  - proxies
  - settings
  - upstreamgroups
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gloo.solo.io
  resources:
  - proxies/status
  - settings/status
  - upstreamgroups/status
  - upstreams/status
  verbs:
  - get
  - update
- apiGroups:
  - gloo.solo.io
  resources:
  - upstreams
  verbs:
  - '*'
- apiGroups:
  - infrastructure.gloo.solo.io
  resources:
  - cloudproviders
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - infrastructure.gloo.solo.io
  resources:
  - cloudproviders/status
  - cloudresources/status
  verbs:
  - get
  - update
- apiGroups:
  - infrastructure.gloo.solo.io
  resources:
  - cloudresources
  verbs:
  - '*'
- apiGroups:
  - install.istio.io
  resources:
  - istiooperators
  verbs:
  - '*'
- apiGroups:
  - install.istio.io
  resources:
  - istiooperators/status
  verbs:
  - get
  - update
- apiGroups:
  - internal.gloo.solo.io
  resources:
  - certificaterequests
  - clusteristioinstallations
  - discoveredcnis
  - discoveredgateways
  - issuedcertificates
  - meshes
  - podbouncedirectives
  - portalconfigs
  - spireregistrationentries
  - virtualservicebackups
  - xdsconfigs
  verbs:
  - '*'
- apiGroups:
  - internal.gloo.solo.io
  resources:
  - certificaterequests/status
  - discoveredcnis/status
  - discoveredgateways/status
  - issuedcertificates/status
  - meshes/status
  - podbouncedirectives/status
  - portalconfigs/status
  - spireregistrationentries/status
  - virtualservicebackups/status
  - xdsconfigs/status
  verbs:
  - get
  - update
- apiGroups:
  - k8s.cni.cncf.io
  resources:
  - network-attachment-definitions
  verbs:
  - '*'
- apiGroups:
  - networking.gloo.solo.io
  resources:
  - externalendpoints
  - externalservices
  - externalworkloads
  - progressivedeliveries
  - routetables
  - virtualdestinations
  - virtualgateways
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.gloo.solo.io
  resources:
  - externalendpoints/status
  - externalservices/status
  - externalworkloads/status
  - progressivedeliveries/status
  - routetables/status
  - virtualdestinations/status
  - virtualgateways/status
  verbs:
  - get
  - update
- apiGroups:
  - networking.istio.io
  resources:
  - destinationrules
  - envoyfilters
  - gateways
  - serviceentries
  - sidecars
  - virtualservices
  - workloadentries
  - workloadgroups
  verbs:
  - '*'
- apiGroups:
  - networking.istio.io
  resources:
  - destinationrules/status
  - envoyfilters/status
  - gateways/status
  - serviceentries/status
  - sidecars/status
  - virtualservices/status
  - workloadentries/status
  - workloadgroups/status
  verbs:
  - get
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - '*'
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - observability.policy.gloo.solo.io
  resources:
  - accesslogpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - observability.policy.gloo.solo.io
  resources:
  - accesslogpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - operator.gloo.solo.io
  resources:
  - servicemeshcontrollers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - operator.gloo.solo.io
  resources:
  - servicemeshcontrollers/status
  verbs:
  - get
  - update
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - '*'
- apiGroups:
  - ratelimit.solo.io
  resources:
  - ratelimitconfigs
  verbs:
  - '*'
- apiGroups:
  - ratelimit.solo.io
  resources:
  - ratelimitconfigs/status
  verbs:
  - get
  - update
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings
  - clusterroles
  - rolebindings
  - roles
  verbs:
  - '*'
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings/status
  - clusterroles/status
  - rolebindings/status
  - roles/status
  verbs:
  - get
  - update
- apiGroups:
  - resilience.policy.gloo.solo.io
  resources:
  - activehealthcheckpolicies
  - adaptiverequestconcurrencypolicies
  - connectionpolicies
  - failoverpolicies
  - faultinjectionpolicies
  - graphqlpersistedquerycachepolicies
  - listenerconnectionpolicies
  - outlierdetectionpolicies
  - retrytimeoutpolicies
  - trimproxyconfigpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - resilience.policy.gloo.solo.io
  resources:
  - activehealthcheckpolicies/status
  - adaptiverequestconcurrencypolicies/status
  - connectionpolicies/status
  - failoverpolicies/status
  - faultinjectionpolicies/status
  - graphqlpersistedquerycachepolicies/status
  - listenerconnectionpolicies/status
  - outlierdetectionpolicies/status
  - retrytimeoutpolicies/status
  - trimproxyconfigpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - security.istio.io
  resources:
  - authorizationpolicies
  - peerauthentications
  verbs:
  - '*'
- apiGroups:
  - security.istio.io
  resources:
  - authorizationpolicies/status
  - peerauthentications/status
  verbs:
  - get
  - update
- apiGroups:
  - security.policy.gloo.solo.io
  resources:
  - accesspolicies
  - clienttlspolicies
  - corspolicies
  - csrfpolicies
  - dlppolicies
  - extauthpolicies
  - graphqlallowedquerypolicies
  - jwtpolicies
  - wafpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - security.policy.gloo.solo.io
  resources:
  - accesspolicies/status
  - clienttlspolicies/status
  - corspolicies/status
  - csrfpolicies/status
  - dlppolicies/status
  - extauthpolicies/status
  - graphqlallowedquerypolicies/status
  - jwtpolicies/status
  - wafpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - telemetry.istio.io
  resources:
  - telemetries
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - telemetry.istio.io
  resources:
  - telemetries/status
  verbs:
  - get
  - update
- apiGroups:
  - trafficcontrol.policy.gloo.solo.io
  resources:
  - headermanipulationpolicies
  - httpbufferpolicies
  - loadbalancerpolicies
  - mirrorpolicies
  - proxyprotocolpolicies
  - ratelimitclientconfigs
  - ratelimitpolicies
  - transformationpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - trafficcontrol.policy.gloo.solo.io
  resources:
  - headermanipulationpolicies/status
  - httpbufferpolicies/status
  - loadbalancerpolicies/status
  - mirrorpolicies/status
  - proxyprotocolpolicies/status
  - ratelimitclientconfigs/status
  - ratelimitpolicies/status
  - transformationpolicies/status
  verbs:
  - get
  - update
---
# Source: gloo-platform/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-mesh-mgmt-server-gloo-platform-cnp-nginx-namespaced
  labels:
    app: gloo-mesh-mgmt-server
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - secrets/status
  verbs:
  - get
  - update
---
# Source: gloo-platform/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-mesh-ui-cnp-nginx
  labels:
    app: gloo-mesh-ui
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - namespaces
  - pods
  - resourcequotas
  - secrets
  - serviceaccounts
  - services
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - configmaps/status
  - namespaces/status
  - nodes/status
  - pods/status
  - serviceaccounts/status
  - services/status
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - admin.gloo.solo.io
  resources:
  - dashboards
  - extauthservers
  - gatewaylifecyclemanagers
  - insightsconfigs
  - istiolifecyclemanagers
  - kubernetesclusters
  - ratelimitserverconfigs
  - ratelimitserversettings
  - roottrustpolicies
  - waypointlifecyclemanagers
  - workspaces
  - workspacesettings
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - admin.gloo.solo.io
  resources:
  - dashboards/status
  - extauthservers/status
  - gatewaylifecyclemanagers/status
  - insightsconfigs/status
  - istiolifecyclemanagers/status
  - kubernetesclusters/status
  - ratelimitserverconfigs/status
  - ratelimitserversettings/status
  - roottrustpolicies/status
  - waypointlifecyclemanagers/status
  - workspaces/status
  - workspacesettings/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - '*'
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations/status
  - validatingwebhookconfigurations/status
  verbs:
  - get
  - update
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions/status
  verbs:
  - get
  - update
- apiGroups:
  - apimanagement.gloo.solo.io
  resources:
  - apidocs
  verbs:
  - '*'
- apiGroups:
  - apimanagement.gloo.solo.io
  resources:
  - apidocs/status
  - apiproducts/status
  - apischemadiscoveries/status
  - graphqlresolvermaps/status
  - graphqlschemas/status
  - graphqlstitchedschemas/status
  - portalgroups/status
  - portals/status
  verbs:
  - get
  - update
- apiGroups:
  - apimanagement.gloo.solo.io
  resources:
  - apiproducts
  - apischemadiscoveries
  - graphqlresolvermaps
  - graphqlschemas
  - graphqlstitchedschemas
  - portalgroups
  - portals
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - daemonsets/status
  - deployments/status
  - replicasets/status
  - statefulsets/status
  verbs:
  - get
  - update
- apiGroups:
  - apps
  resources:
  - replicasets
  - statefulsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - '*'
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  verbs:
  - '*'
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - '*'
- apiGroups:
  - enterprise.gloo.solo.io
  resources:
  - authconfigs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - enterprise.gloo.solo.io
  resources:
  - authconfigs/status
  verbs:
  - get
  - update
- apiGroups:
  - extauth.solo.io
  resources:
  - authconfigs
  verbs:
  - '*'
- apiGroups:
  - extauth.solo.io
  resources:
  - authconfigs/status
  verbs:
  - get
  - update
- apiGroups:
  - extensions.istio.io
  resources:
  - wasmplugins
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions.policy.gloo.solo.io
  resources:
  - wasmdeploymentpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions.policy.gloo.solo.io
  resources:
  - wasmdeploymentpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - gateway.gloo.solo.io
  resources:
  - gatewayparameters
  verbs:
  - '*'
- apiGroups:
  - gateway.gloo.solo.io
  resources:
  - gatewayparameters/status
  verbs:
  - get
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses
  - gateways
  - httproutes
  - referencegrants
  verbs:
  - '*'
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - gatewayclasses/status
  - gateways/status
  - httproutes/status
  - tcproutes/status
  verbs:
  - get
  - update
- apiGroups:
  - gateway.networking.k8s.io
  resources:
  - tcproutes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gateway.solo.io
  resources:
  - gateways
  - httpgateways
  - httplisteneroptions
  - listeneroptions
  - routeoptions
  - routetables
  - tcpgateways
  - virtualhostoptions
  - virtualservices
  verbs:
  - '*'
- apiGroups:
  - gateway.solo.io
  resources:
  - gateways/status
  - httplisteneroptions/status
  - listeneroptions/status
  - routeoptions/status
  - routetables/status
  - virtualhostoptions/status
  - virtualservices/status
  verbs:
  - get
  - update
- apiGroups:
  - gloo.solo.io
  resources:
  - proxies
  - settings
  - upstreamgroups
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - gloo.solo.io
  resources:
  - proxies/status
  - settings/status
  - upstreamgroups/status
  - upstreams/status
  verbs:
  - get
  - update
- apiGroups:
  - gloo.solo.io
  resources:
  - upstreams
  verbs:
  - '*'
- apiGroups:
  - infrastructure.gloo.solo.io
  resources:
  - cloudproviders
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - infrastructure.gloo.solo.io
  resources:
  - cloudproviders/status
  - cloudresources/status
  verbs:
  - get
  - update
- apiGroups:
  - infrastructure.gloo.solo.io
  resources:
  - cloudresources
  verbs:
  - '*'
- apiGroups:
  - install.istio.io
  resources:
  - istiooperators
  verbs:
  - '*'
- apiGroups:
  - install.istio.io
  resources:
  - istiooperators/status
  verbs:
  - get
  - update
- apiGroups:
  - internal.gloo.solo.io
  resources:
  - certificaterequests
  - clusteristioinstallations
  - discoveredcnis
  - discoveredgateways
  - issuedcertificates
  - meshes
  - podbouncedirectives
  - portalconfigs
  - spireregistrationentries
  - virtualservicebackups
  - xdsconfigs
  verbs:
  - '*'
- apiGroups:
  - internal.gloo.solo.io
  resources:
  - certificaterequests/status
  - discoveredcnis/status
  - discoveredgateways/status
  - issuedcertificates/status
  - meshes/status
  - podbouncedirectives/status
  - portalconfigs/status
  - spireregistrationentries/status
  - virtualservicebackups/status
  - xdsconfigs/status
  verbs:
  - get
  - update
- apiGroups:
  - k8s.cni.cncf.io
  resources:
  - network-attachment-definitions
  verbs:
  - '*'
- apiGroups:
  - networking.gloo.solo.io
  resources:
  - externalendpoints
  - externalservices
  - externalworkloads
  - progressivedeliveries
  - routetables
  - virtualdestinations
  - virtualgateways
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.gloo.solo.io
  resources:
  - externalendpoints/status
  - externalservices/status
  - externalworkloads/status
  - progressivedeliveries/status
  - routetables/status
  - virtualdestinations/status
  - virtualgateways/status
  verbs:
  - get
  - update
- apiGroups:
  - networking.istio.io
  resources:
  - destinationrules
  - envoyfilters
  - gateways
  - serviceentries
  - sidecars
  - virtualservices
  - workloadentries
  - workloadgroups
  verbs:
  - '*'
- apiGroups:
  - networking.istio.io
  resources:
  - destinationrules/status
  - envoyfilters/status
  - gateways/status
  - serviceentries/status
  - sidecars/status
  - virtualservices/status
  - workloadentries/status
  - workloadgroups/status
  verbs:
  - get
  - update
- apiGroups:
  - networking.istio.io
  resources:
  - proxyconfigs
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - '*'
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - observability.policy.gloo.solo.io
  resources:
  - accesslogpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - observability.policy.gloo.solo.io
  resources:
  - accesslogpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - operator.gloo.solo.io
  resources:
  - servicemeshcontrollers
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - operator.gloo.solo.io
  resources:
  - servicemeshcontrollers/status
  verbs:
  - get
  - update
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - '*'
- apiGroups:
  - ratelimit.solo.io
  resources:
  - ratelimitconfigs
  verbs:
  - '*'
- apiGroups:
  - ratelimit.solo.io
  resources:
  - ratelimitconfigs/status
  verbs:
  - get
  - update
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings
  - clusterroles
  - rolebindings
  - roles
  verbs:
  - '*'
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings/status
  - clusterroles/status
  - rolebindings/status
  - roles/status
  verbs:
  - get
  - update
- apiGroups:
  - resilience.policy.gloo.solo.io
  resources:
  - activehealthcheckpolicies
  - adaptiverequestconcurrencypolicies
  - connectionpolicies
  - failoverpolicies
  - faultinjectionpolicies
  - graphqlpersistedquerycachepolicies
  - listenerconnectionpolicies
  - outlierdetectionpolicies
  - retrytimeoutpolicies
  - trimproxyconfigpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - resilience.policy.gloo.solo.io
  resources:
  - activehealthcheckpolicies/status
  - adaptiverequestconcurrencypolicies/status
  - connectionpolicies/status
  - failoverpolicies/status
  - faultinjectionpolicies/status
  - graphqlpersistedquerycachepolicies/status
  - listenerconnectionpolicies/status
  - outlierdetectionpolicies/status
  - retrytimeoutpolicies/status
  - trimproxyconfigpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - security.istio.io
  resources:
  - authorizationpolicies
  - peerauthentications
  verbs:
  - '*'
- apiGroups:
  - security.istio.io
  resources:
  - authorizationpolicies/status
  - peerauthentications/status
  verbs:
  - get
  - update
- apiGroups:
  - security.istio.io
  resources:
  - requestauthentications
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - security.policy.gloo.solo.io
  resources:
  - accesspolicies
  - clienttlspolicies
  - corspolicies
  - csrfpolicies
  - dlppolicies
  - extauthpolicies
  - graphqlallowedquerypolicies
  - jwtpolicies
  - wafpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - security.policy.gloo.solo.io
  resources:
  - accesspolicies/status
  - clienttlspolicies/status
  - corspolicies/status
  - csrfpolicies/status
  - dlppolicies/status
  - extauthpolicies/status
  - graphqlallowedquerypolicies/status
  - jwtpolicies/status
  - wafpolicies/status
  verbs:
  - get
  - update
- apiGroups:
  - telemetry.istio.io
  resources:
  - telemetries
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - telemetry.istio.io
  resources:
  - telemetries/status
  verbs:
  - get
  - update
- apiGroups:
  - trafficcontrol.policy.gloo.solo.io
  resources:
  - headermanipulationpolicies
  - httpbufferpolicies
  - loadbalancerpolicies
  - mirrorpolicies
  - proxyprotocolpolicies
  - ratelimitclientconfigs
  - ratelimitpolicies
  - transformationpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - trafficcontrol.policy.gloo.solo.io
  resources:
  - headermanipulationpolicies/status
  - httpbufferpolicies/status
  - loadbalancerpolicies/status
  - mirrorpolicies/status
  - proxyprotocolpolicies/status
  - ratelimitclientconfigs/status
  - ratelimitpolicies/status
  - transformationpolicies/status
  verbs:
  - get
  - update
---
# Source: gloo-platform/charts/prometheus/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: gloo-platform
    app.kubernetes.io/version: v2.53.0
    helm.sh/chart: prometheus-25.23.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: prometheus-server
subjects:
  - kind: ServiceAccount
    name: prometheus-server
    namespace: cnp-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-server
---
# Source: gloo-platform/charts/telemetryCollector/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gloo-telemetry-collector
  labels:
    helm.sh/chart: telemetryCollector-0.93.3
    app.kubernetes.io/name: telemetryCollector
    app.kubernetes.io/instance: gloo-platform
    app.kubernetes.io/version: "0.102.1"
    app.kubernetes.io/managed-by: Helm
    app: gloo-telemetry-collector-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gloo-telemetry-collector
subjects:
- kind: ServiceAccount
  name: gloo-telemetry-collector
  namespace: cnp-nginx
---
# Source: gloo-platform/charts/telemetryGateway/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gloo-telemetry-gateway
  labels:
    helm.sh/chart: telemetryGateway-0.93.3
    app.kubernetes.io/name: telemetryGateway
    app.kubernetes.io/instance: gloo-platform
    app.kubernetes.io/version: "0.102.1"
    app.kubernetes.io/managed-by: Helm
    app: gloo-telemetry-gateway
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gloo-telemetry-gateway
subjects:
- kind: ServiceAccount
  name: gloo-telemetry-gateway
  namespace: cnp-nginx
---
# Source: gloo-platform/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-mesh-mgmt-server-cnp-nginx
  labels:
    app: gloo-mesh-mgmt-server
subjects:
- kind: ServiceAccount
  name: gloo-mesh-mgmt-server
  namespace: cnp-nginx
roleRef:
  kind: ClusterRole
  name: gloo-mesh-mgmt-server-cnp-nginx
  apiGroup: rbac.authorization.k8s.io

#
#
#
---
# Source: gloo-platform/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-mesh-mgmt-server-gloo-platform-cnp-nginx-namespaced
  labels:
    app: gloo-mesh-mgmt-server
subjects:
- kind: ServiceAccount
  name: gloo-mesh-mgmt-server
  namespace: cnp-nginx
roleRef:
  kind: ClusterRole
  name: gloo-mesh-mgmt-server-gloo-platform-cnp-nginx-namespaced
  apiGroup: rbac.authorization.k8s.io
# Rbac manifests for gloo-mesh-agent

# Rbac manifests for gloo-mesh-ui
---
# Source: gloo-platform/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-mesh-ui-cnp-nginx
  labels:
    app: gloo-mesh-ui
subjects:
- kind: ServiceAccount
  name: gloo-mesh-ui
  namespace: cnp-nginx
roleRef:
  kind: ClusterRole
  name: gloo-mesh-ui-cnp-nginx
  apiGroup: rbac.authorization.k8s.io

#
#
#map[cnp-nginx:[secrets configmaps pods]]
---
# Source: gloo-platform/templates/rbac.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-mesh-ui-gloo-platform-cnp-nginx-namespaced
  namespace: cnp-nginx
  labels:
    app: gloo-mesh-ui
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/status
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets/status
  verbs:
  - get
  - update
---
# Source: gloo-platform/templates/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gloo-mesh-ui-gloo-platform-cnp-nginx-namespaced
  namespace: cnp-nginx
  labels:
    app: gloo-mesh-ui
subjects:
- kind: ServiceAccount
  name: gloo-mesh-ui
  namespace: cnp-nginx
roleRef:
  kind: Role
  name: gloo-mesh-ui-gloo-platform-cnp-nginx-namespaced
  apiGroup: rbac.authorization.k8s.io
# Rbac manifests for gloo-mesh-portal-server

# Rbac manifests for gloo-spire-server

# Rbac manifests for gloo-mesh-analyzer
---
# Source: gloo-platform/charts/prometheus/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: gloo-platform
    app.kubernetes.io/version: v2.53.0
    helm.sh/chart: prometheus-25.23.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: prometheus-server
  namespace: cnp-nginx
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
  selector:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: gloo-platform
  sessionAffinity: None
  type: "ClusterIP"
---
# Source: gloo-platform/charts/telemetryCollector/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gloo-telemetry-collector
  namespace: cnp-nginx
  labels:
    helm.sh/chart: telemetryCollector-0.93.3
    app.kubernetes.io/name: telemetryCollector
    app.kubernetes.io/instance: gloo-platform
    app.kubernetes.io/version: "0.102.1"
    app.kubernetes.io/managed-by: Helm
    app: gloo-telemetry-collector-agent
    component: agent-collector
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    
    - name: jaeger-compact
      port: 6831
      targetPort: 6831
      protocol: UDP
    - name: jaeger-grpc
      port: 14250
      targetPort: 14250
      protocol: TCP
    - name: jaeger-thrift
      port: 14268
      targetPort: 14268
      protocol: TCP
    - name: otlp
      port: 4317
      targetPort: 4317
      protocol: TCP
      appProtocol: grpc
    - name: otlp-http
      port: 4318
      targetPort: 4318
      protocol: TCP
    - name: zipkin
      port: 9411
      targetPort: 9411
      protocol: TCP
  selector:
    app.kubernetes.io/name: telemetryCollector
    app.kubernetes.io/instance: gloo-platform
    component: agent-collector
  internalTrafficPolicy: Local
---
# Source: gloo-platform/charts/telemetryGateway/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gloo-telemetry-gateway
  namespace: cnp-nginx
  labels:
    helm.sh/chart: telemetryGateway-0.93.3
    app.kubernetes.io/name: telemetryGateway
    app.kubernetes.io/instance: gloo-platform
    app.kubernetes.io/version: "0.102.1"
    app.kubernetes.io/managed-by: Helm
    app: gloo-telemetry-gateway
    component: standalone-collector
spec:
  type: LoadBalancer
  ports:
    
    - name: otlp
      port: 4317
      targetPort: 4317
      protocol: TCP
      appProtocol: grpc
  selector:
    app.kubernetes.io/name: telemetryGateway
    app.kubernetes.io/instance: gloo-platform
    component: standalone-collector
  internalTrafficPolicy: Cluster
---
# Source: gloo-platform/templates/admin-service.yaml
# Admin service for gloo-mesh-mgmt-server; exposes stats endpoints for metadata
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo-mesh-mgmt-server
    service: admin
  annotations:
    app.kubernetes.io/name: gloo-mesh-mgmt-server
  name: gloo-mesh-mgmt-server-admin
  namespace: cnp-nginx
spec:
  selector:
    app: gloo-mesh-mgmt-server
  type: ClusterIP
  ports:
    - name: stats
      port: 9091
---
# Source: gloo-platform/templates/deployment.yaml
# Service for gloo-mesh-mgmt-server

apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo-mesh-mgmt-server
  annotations:
    app.kubernetes.io/name: gloo-mesh-mgmt-server
  name: gloo-mesh-mgmt-server
  namespace: cnp-nginx
spec:
  selector:
    app: gloo-mesh-mgmt-server
  type: LoadBalancer
  ports:
  - name: healthcheck
    port: 8090
  - name: grpc
    port: 9900
---
# Source: gloo-platform/templates/deployment.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo-mesh-agent
  annotations:
    app.kubernetes.io/name: gloo-mesh-agent
  name: gloo-mesh-agent
  namespace: cnp-nginx
spec:
  selector:
    app: gloo-mesh-mgmt-server
  type: ClusterIP
  ports:
  - name: http
    port: 9988
  - name: stats
    port: 9093
  - name: grpc
    port: 9977
  - name: healthcheck
    port: 8091
  - name: grpc-internaladmin
    port: 31337
---
# Source: gloo-platform/templates/deployment.yaml
# Service for gloo-mesh-ui

apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo-mesh-ui
  annotations:
    app.kubernetes.io/name: gloo-mesh-ui
  name: gloo-mesh-ui
  namespace: cnp-nginx
spec:
  selector:
    app: gloo-mesh-ui
  type: ClusterIP
  ports:
  - name: grpc
    port: 10101
  - name: console
    port: 8090
  - name: healthcheck
    port: 8081
---
# Source: gloo-platform/templates/deployment.yaml
# Service for gloo-mesh-redis

apiVersion: v1
kind: Service
metadata:
  labels:
    app: gloo-mesh-redis
  annotations:
    app.kubernetes.io/name: gloo-mesh-redis
  name: gloo-mesh-redis
  namespace: cnp-nginx
spec:
  selector:
    app: gloo-mesh-redis
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
---
# Source: gloo-platform/charts/telemetryCollector/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: gloo-telemetry-collector-agent
  namespace: cnp-nginx
  labels:
    helm.sh/chart: telemetryCollector-0.93.3
    app.kubernetes.io/name: telemetryCollector
    app.kubernetes.io/instance: gloo-platform
    app.kubernetes.io/version: "0.102.1"
    app.kubernetes.io/managed-by: Helm
    app: gloo-telemetry-collector-agent
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: telemetryCollector
      app.kubernetes.io/instance: gloo-platform
      component: agent-collector
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: telemetryCollector
        app.kubernetes.io/instance: gloo-platform
        component: agent-collector
        app: gloo-telemetry-collector-agent
    spec:
      
      serviceAccountName: gloo-telemetry-collector
      securityContext:
        {}
      containers:
        - name: telemetrycollector
          command:
            - /gloo-otel-collector
          args:
            - --config=/conf/relay.yaml
          securityContext:
            {}
          image: "harbor-preprod.blackrock.com/library/external/gcr.io/gloo-mesh/otel-collector:0.2.3"
          imagePullPolicy: IfNotPresent
          ports:
            
            - name: jaeger-compact
              containerPort: 6831
              protocol: UDP
            - name: jaeger-grpc
              containerPort: 14250
              protocol: TCP
            - name: jaeger-thrift
              containerPort: 14268
              protocol: TCP
            - name: otlp
              containerPort: 4317
              protocol: TCP
            - name: otlp-http
              containerPort: 4318
              protocol: TCP
            - name: zipkin
              containerPort: 9411
              protocol: TCP
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: GOMEMLIMIT
              value: "204MiB"
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: KUBE_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: REDIS_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: redis-auth-secrets
                  optional: true
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: redis-auth-secrets
                  optional: true
          livenessProbe:
            httpGet:
              path: /
              port: 13133
          readinessProbe:
            httpGet:
              path: /
              port: 13133
          resources:
            limits:
              cpu: 500m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - name: varlogpods
              mountPath: /var/log/pods
              readOnly: true
            - name: varlibdockercontainers
              mountPath: /var/lib/docker/containers
              readOnly: true
            - mountPath: /etc/otel-certs
              name: root-ca
              readOnly: true
            - mountPath: /conf
              name: telemetry-configmap
            - mountPath: /var/run/cilium
              name: cilium-run
      volumes:
        - name: varlogpods
          hostPath:
            path: /var/log/pods
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers
        - name: root-ca
          projected:
            sources:
            - secret:
                name: gloo-telemetry-collector-ca-certs
                optional: true
            - secret:
                name: relay-root-tls-secret
                optional: true
        - configMap:
            items:
            - key: relay
              path: relay.yaml
            name: gloo-telemetry-collector-config
          name: telemetry-configmap
        - hostPath:
            path: /var/run/cilium
            type: DirectoryOrCreate
          name: cilium-run
      tolerations:
        - effect: NoSchedule
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
        - effect: NoExecute
          key: node.kubernetes.io/not-ready
          operator: Exists
        - effect: NoExecute
          key: node.kubernetes.io/unreachable
          operator: Exists
        - effect: NoSchedule
          key: node.kubernetes.io/disk-pressure
          operator: Exists
        - effect: NoSchedule
          key: node.kubernetes.io/memory-pressure
          operator: Exists
        - effect: NoSchedule
          key: node.kubernetes.io/pid-pressure
          operator: Exists
        - effect: NoSchedule
          key: node.kubernetes.io/unschedulable
          operator: Exists
      hostNetwork: false
---
# Source: gloo-platform/charts/prometheus/templates/deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/instance: gloo-platform
    app.kubernetes.io/version: v2.53.0
    helm.sh/chart: prometheus-25.23.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: prometheus
  name: prometheus-server
  namespace: cnp-nginx
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: server
      app.kubernetes.io/name: prometheus
      app.kubernetes.io/instance: gloo-platform
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: Recreate
    rollingUpdate: null
  template:
    metadata:
      labels:
        app.kubernetes.io/component: server
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/instance: gloo-platform
        app.kubernetes.io/version: v2.53.0
        helm.sh/chart: prometheus-25.23.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/part-of: prometheus
    spec:
      enableServiceLinks: true
      serviceAccountName: prometheus-server
      containers:
        - name: prometheus-server-configmap-reload
          image: "harbor-preprod.blackrock.com/library/external/quay.io/prometheus-operator/prometheus-config-reloader:v0.74.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --watched-dir=/etc/config
            - --listen-address=0.0.0.0:8080
            - --reload-url=http://127.0.0.1:9090/-/reload
          ports:
            - containerPort: 8080
              name: metrics
          livenessProbe:
            httpGet:
              path: /healthz
              port: metrics
              scheme: HTTP
            initialDelaySeconds: 2
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: metrics
              scheme: HTTP
            periodSeconds: 10
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true

        - name: prometheus-server
          image: "harbor-preprod.blackrock.com/library/external/gcr.io/gloo-mesh/prometheus:v2.53.4"
          imagePullPolicy: "IfNotPresent"
          args:
            - --storage.tsdb.retention.time=15d
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 4
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: /data
              subPath: ""
      dnsPolicy: ClusterFirst
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          secret:
            secretName: gloo-prometheus-server
        - name: storage-volume
          emptyDir:
            {}
---
# Source: gloo-platform/charts/telemetryGateway/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gloo-telemetry-gateway
  namespace: cnp-nginx
  labels:
    helm.sh/chart: telemetryGateway-0.93.3
    app.kubernetes.io/name: telemetryGateway
    app.kubernetes.io/instance: gloo-platform
    app.kubernetes.io/version: "0.102.1"
    app.kubernetes.io/managed-by: Helm
    app: gloo-telemetry-gateway
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: telemetryGateway
      app.kubernetes.io/instance: gloo-platform
      component: standalone-collector
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: telemetryGateway
        app.kubernetes.io/instance: gloo-platform
        component: standalone-collector
        app: gloo-telemetry-gateway
    spec:
      
      serviceAccountName: gloo-telemetry-gateway
      securityContext:
        {}
      containers:
        - name: telemetrygateway
          command:
            - /gloo-otel-collector
          args:
            - --config=/conf/relay.yaml
          securityContext:
            {}
          image: "harbor-preprod.blackrock.com/library/external/gcr.io/gloo-mesh/otel-collector:0.2.3"
          imagePullPolicy: IfNotPresent
          ports:
            
            - name: otlp
              containerPort: 4317
              protocol: TCP
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: GOMEMLIMIT
              value: "204MiB"
            - name: REDIS_USERNAME
              valueFrom:
                secretKeyRef:
                  key: username
                  name: redis-auth-secrets
                  optional: true
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: redis-auth-secrets
                  optional: true
          livenessProbe:
            httpGet:
              path: /
              port: 13133
          readinessProbe:
            httpGet:
              path: /
              port: 13133
          resources:
            limits:
              cpu: 500m
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - mountPath: /etc/otel-certs
              name: tls-keys
              readOnly: true
            - mountPath: /conf
              name: telemetry-configmap
      volumes:
        - name: tls-keys
          projected:
            sources:
            - secret:
                name: gloo-telemetry-gateway-ca-certs
                optional: true
            - secret:
                name: gloo-telemetry-gateway-tls-secret
                optional: true
        - configMap:
            items:
            - key: relay
              path: relay.yaml
            name: gloo-telemetry-gateway-config
          name: telemetry-configmap
      hostNetwork: false
---
# Source: gloo-platform/templates/deployment.yaml
---

# Deployment manifest for gloo-mesh-mgmt-server

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo-mesh-mgmt-server
  annotations:
    app.kubernetes.io/name: gloo-mesh-mgmt-server
  name: gloo-mesh-mgmt-server
  namespace: cnp-nginx
spec:
  selector:
    matchLabels:
      app: gloo-mesh-mgmt-server
  template:
    metadata:
      labels:
        app: gloo-mesh-mgmt-server
      annotations:
        app.kubernetes.io/name: gloo-mesh-mgmt-server
        checksum/storage: 0282f4d0aef4ee40ae410a75e5088c069d7f5eac19e4ba9ac645ec3eef25adac
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: gloo-mesh-mgmt-server
      volumes:
      - name: license-keys
        secret:
          secretName: 'license-keys'
      - configMap:
          name: redis-client-config
        name: redis-client-config
      - name: istio-token
        projected:
          defaultMode: 420
          sources:
          - serviceAccountToken:
              audience: istio-ca
              expirationSeconds: 600
              path: istio-token
      containers:
      - name: gloo-mesh-mgmt-server
        image: harbor-preprod.blackrock.com/library/external/gcr.io/gloo-mesh/gloo-mesh-mgmt-server:2.7.2
        imagePullPolicy: IfNotPresent
        args:
        - run
        - --cluster=cluster1
        - --admin-namespace=cnp-nginx
        - --secrets-namespaces=
        - --grpc-port=9900
        - --stats-port=9091
        - --dev-logger=false
        - --relay-server-tls-secret-name=relay-server-tls-secret
        - --relay-server-tls-secret-namespace=cnp-nginx
        - --relay-tls-signing-secret-name=relay-tls-signing-secret
        - --relay-tls-signing-secret-namespace=cnp-nginx
        - --relay-identity-token-secret-name=relay-identity-token-secret
        - --relay-identity-token-secret-namespace=cnp-nginx
        - --relay-identity-token-secret-key=token
        - --disable-relay-ca=false
        - --relay-push-rbac=true
        - --relay-push-crds=true
        - --cloud-resources-discovery-enabled=true
        - --cloud-resources-discovery-polling-interval=10s
        - --max-grpc-message-size=4294967295
        - --concurrency=10
        - --enable-cluster-load-balancing=false
        - --insecure=false
        - --verbose=false
        - --leader-election=true
        - --http-healthcheck-port=8090
        - --read-only-generated-resources=false
        - --insights-enabled=true
        - --feature-gates=ConfigDistribution=false,SafeMode=true
        - --policy-apis-enabled=true
        - --safe-start-window=180
        ports:
        - name: stats
          containerPort: 9091
        - name: healthcheck
          containerPort: 8090
        - name: grpc
          containerPort: 9900
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_UID
            valueFrom:
              fieldRef:
                fieldPath: metadata.uid
          - name: K8S_MEM_LIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.cpu
          - name: LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: key
                name: gloo-mesh-enterprise-license
                optional: true
        volumeMounts:
        - mountPath: /etc/license-keys
          name: license-keys
          readOnly: true
        - mountPath: /etc/redis-client-config
          name: redis-client-config
          readOnly: true
        resources:
          limits:
            cpu: 1
            memory: 512Mi
          requests:
            cpu: 200m
            memory: 256Mi
        securityContext:
          runAsNonRoot: true
          runAsUser: 10101
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        readinessProbe:
          httpGet:
            path: /
            port: 8090
          initialDelaySeconds: 5
          periodSeconds: 10

      - name: gloo-mesh-agent
        image: gcr.io/gloo-mesh/gloo-mesh-agent:2.7.2
        imagePullPolicy: IfNotPresent
        args:
        - run
        - --cluster=cluster1
        - --secrets-namespaces=
        - --stats-port=9093
        - --grpc-port=9977
        - --http-healthcheck-port=8091
        - --dev-logger=false
        - --relay-address=localhost:9900
        - --relay-authority=gloo-mesh-mgmt-server.cnp-nginx
        - --relay-client-cert-secret-name=relay-client-tls-secret
        - --relay-client-cert-secret-namespace=cnp-nginx
        - --relay-client-cert-rotation-grace-period-ratio=
        - --relay-root-cert-secret-name=relay-root-tls-secret
        - --relay-root-cert-secret-namespace=cnp-nginx
        - --relay-identity-token-secret-name=relay-identity-token-secret
        - --relay-identity-token-secret-namespace=cnp-nginx
        - --relay-identity-token-secret-key=token
        - --max-grpc-message-size=4294967295
        - --metrics-buffer-size=50
        - --access-logs-buffer-size=50
        - --relay-insecure=false
        - --verbose=false
        - --leader-election=true
        - --read-only-generated-resources=false
        - --feature-gates=ConfigDistribution=false,SafeMode=true
        ports:
        - name: stats
          containerPort: 9093
        - name: http
          containerPort: 9988
        - name: grpc
          containerPort: 9977
        - name: healthcheck
          containerPort: 8091
        - name: internaladmin
          containerPort: 31337
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: K8S_MEM_LIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.cpu
        resources:
          limits:
            cpu: 500m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext:
          runAsNonRoot: true
          runAsUser: 10101
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        readinessProbe:
          httpGet:
            path: /
            port: 8091
          initialDelaySeconds: 5
          periodSeconds: 10
---
# Source: gloo-platform/templates/deployment.yaml
---

# Deployment manifest for gloo-mesh-ui

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo-mesh-ui
    gloo-mesh: gloo-mesh-ui
  annotations:
    app.kubernetes.io/name: gloo-mesh-ui
  name: gloo-mesh-ui
  namespace: cnp-nginx
spec:
  selector:
    matchLabels:
      app: gloo-mesh-ui
      gloo-mesh: gloo-mesh-ui
  template:
    metadata:
      labels:
        app: gloo-mesh-ui
        gloo-mesh: gloo-mesh-ui
      annotations:
        app.kubernetes.io/name: gloo-mesh-ui
        checksum/storage: 3c959291cf12e786f8a0dc6a365243550e0f83f4695d1f2d4bf534033b7760aa
        prometheus.io/path: /metrics
        prometheus.io/scrape: "true"
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: gloo-mesh-ui
      volumes:
      - name: license-keys
        secret:
          secretName: 'license-keys'
      - name: envoy-config
        projected:
          sources:
          - configMap:
              name: dashboard-envoy
      - emptyDir: {}
        name: empty-cache
      - emptyDir: {}
        name: empty-run
      - configMap:
          name: redis-client-config
        name: redis-client-config
      - configMap:
          name: nginx-default-conf
        name: nginx-conf-d
      - name: istio-token
        projected:
          defaultMode: 420
          sources:
          - serviceAccountToken:
              audience: istio-ca
              expirationSeconds: 600
              path: istio-token
      containers:
      - name: gloo-mesh-ui
        image: harbor-preprod.blackrock.com/library/external/gcr.io/gloo-mesh/gloo-mesh-apiserver:2.7.2
        imagePullPolicy: IfNotPresent
        args:
        - --cluster=cluster1
        - --secrets-namespaces=
        - --grpc-port=10101
        - --health-check-port=8081
        - --prometheus-url=http://prometheus-server
        - --prometheus-bearer-token-file=
        - --prometheus-ca-file=
        - --prometheus-skip-tls-verify=false
        - --verbose=false
        - --read-only-generated-resources=false
        - --portal-enabled=false
        - --graph-enabled=true
        - --tracing-base-path=
        - --logs-enabled=false
        - --feature-gates=ConfigDistribution=false,SafeMode=true
        - --insights-enabled=true
        - --insights-stats-port=9094
        - --gc-interval=5
        - --concurrency=50
        - --istio-admin-namespace=istio-system
        - --analyzer-run-interval=30
        - --enable-discovery=false
        ports:
        - name: stats
          containerPort: 9094
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: LICENSE_KEY
            valueFrom:
              secretKeyRef:
                key: key
                name: gloo-mesh-enterprise-license
                optional: true
          - name: K8S_MEM_LIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.cpu
        volumeMounts:
        - mountPath: /etc/license-keys
          name: license-keys
          readOnly: true
        - mountPath: /etc/redis-client-config
          name: redis-client-config
          readOnly: true
        - mountPath: /var/run/secrets/tokens
          name: istio-token
        resources:
          limits:
            cpu: 250m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 64Mi
        securityContext:
          runAsNonRoot: true
          runAsUser: 10101
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        readinessProbe:
          httpGet:
            path: /
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
      - name: envoy
        image: harbor-preprod.blackrock.com/library/external/gcr.io/gloo-mesh/gloo-mesh-envoy:2.7.2
        imagePullPolicy: IfNotPresent
        args:
        - --service-node
        - $(POD_ID)
        - --service-cluster
        - gloo-mesh-ui
        - --config-path
        - /etc/envoy/config.yaml
        env:
          - name: ENVOY_UID
            value: "0"
          - name: POD_ID
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        volumeMounts:
        - mountPath: /etc/envoy
          name: envoy-config
          readOnly: true
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        securityContext:
          runAsNonRoot: true
          runAsUser: 10101
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        readinessProbe:
          httpGet:
            path: /
            port: 20202
          initialDelaySeconds: 5
          periodSeconds: 10
      - name: console
        image: harbor-preprod.blackrock.com/library/external/gcr.io/gloo-mesh/gloo-mesh-ui:2.7.2
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - mountPath: /var/cache/nginx
          name: empty-cache
        - mountPath: /var/run
          name: empty-run
        - mountPath: /etc/nginx/conf.d
          name: nginx-conf-d
          readOnly: true
        resources:
          requests:
            cpu: 125m
            memory: 256Mi
        securityContext:
          runAsNonRoot: true
          runAsUser: 10101
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        readinessProbe:
          httpGet:
            path: /
            port: 8090
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
---
# Source: gloo-platform/templates/deployment.yaml
---

# Deployment manifest for gloo-mesh-redis

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: gloo-mesh-redis
    gloo-mesh: gloo-mesh-redis
  annotations:
    app.kubernetes.io/name: gloo-mesh-redis
  name: gloo-mesh-redis
  namespace: cnp-nginx
spec:
  selector:
    matchLabels:
      app: gloo-mesh-redis
      gloo-mesh: gloo-mesh-redis
  template:
    metadata:
      labels:
        app: gloo-mesh-redis
        gloo-mesh: gloo-mesh-redis
      annotations:
        app.kubernetes.io/name: gloo-mesh-redis
    spec:
      serviceAccountName: gloo-mesh-redis
      securityContext:
        fsGroup: 1000
      volumes:
      - emptyDir: {}
        name: data
      containers:
      - name: gloo-mesh-redis
        image: harbor-preprod.blackrock.com/library/external/gcr.io/gloo-mesh/redis:7.4.2-alpine
        imagePullPolicy: IfNotPresent
        args:
        - --save ""
        - --appendonly no
        - --appendfsync everysec
        - --io-threads 1
        env:
          - name: MASTER
            value: "true"
        volumeMounts:
        - mountPath: /data
          name: data
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 256Mi
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
---
# Source: gloo-platform/templates/deployment.yaml
# Code generated by skv2. DO NOT EDIT.
---
# Source: gloo-platform/templates/deployment.yaml
---
---
# Source: gloo-platform/templates/deployment.yaml
---
---
# Source: gloo-platform/templates/deployment.yaml
---
---
# Source: gloo-platform/templates/deployment.yaml
---
---
# Source: gloo-platform/templates/deployment.yaml
---
---
# Source: gloo-platform/templates/deployment.yaml
---
---
# Source: gloo-platform/templates/deployment.yaml
---
---
# Source: gloo-platform/templates/deployment.yaml
---
---
# Source: gloo-platform/templates/nginx-default-conf-configmap.yaml
# ConfigMap containing nginx default.conf
---
# Source: gloo-platform/templates/rbac.yaml
# Code generated by skv2. DO NOT EDIT.


# Rbac manifests for gloo-mesh-mgmt-server
---
# Source: gloo-platform/templates/spire-server-configmap.yaml
# ConfigMap containing spire-server config
---
# Source: gloo-platform/templates/ui-auth.yaml
# Secret values for auth config
---
# Source: gloo-platform/templates/ui-auth.yaml
# Dashboard Settings CRD

kind: Dashboard
apiVersion: admin.gloo.solo.io/v2
metadata:
  name: settings
  namespace: cnp-nginx
---
# Source: gloo-platform/templates/kubernetescluster.yaml
apiVersion: admin.gloo.solo.io/v2
kind: KubernetesCluster
metadata:
  name: cluster1
  namespace: cnp-nginx
spec:
  clusterDomain: cluster.local

